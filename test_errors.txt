    Blocking waiting for file lock on build directory
   Compiling llmkg v0.1.0 (C:\code\LLMKG)
warning: field `semantic_density` is never read
   --> tests\minimal_validation.rs:192:9
    |
189 |     struct MockChunk {
    |            --------- field in this struct
...
192 |         semantic_density: f64,
    |         ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `processing_time_ms` is never read
   --> tests\minimal_validation.rs:282:9
    |
279 |     struct MockProcessingResult {
    |            -------------------- field in this struct
...
282 |         processing_time_ms: u64,
    |         ^^^^^^^^^^^^^^^^^^

warning: fields `entity_precision` and `relationship_recall` are never read
   --> tests\minimal_validation.rs:331:9
    |
329 |     struct MockQualityMetrics {
    |            ------------------ fields in this struct
330 |         overall_quality: f64,
331 |         entity_precision: f64,
    |         ^^^^^^^^^^^^^^^^
332 |         relationship_recall: f64,
    |         ^^^^^^^^^^^^^^^^^^^

error[E0432]: unresolved import `llmkg::Error`
  --> tests\simple_link_test.rs:14:45
   |
14 |         use llmkg::{KnowledgeGraph, Result, Error};
   |                                             ^^^^^
   |                                             |
   |                                             no `Error` in the root
   |                                             help: a similar name exists in the module: `error`
   |
   = help: consider importing one of these items instead:
           crate::simple_link_tests::LogLevel::Error
           crate::simple_link_tests::monitoring::LogLevel::Error
           crate::simple_link_tests::monitoring::collectors::test_execution_tracker::TestStatus::Error
           std::error::Error
           std::fmt::Error
           std::fs::TryLockError::Error
           std::io::Error
           core::error::Error
           core::fmt::Error
           anyhow::Error
           axum::Error
           bincode::Error
           chrono::format::Item::Error
           clap::Error
           clap::error::Error
           dotenv::Error
           futures::io::Error
           futures_util::io::Error
           llmkg::LogLevel::Error
           llmkg::monitoring::LogLevel::Error
           llmkg::monitoring::collectors::test_execution_tracker::TestStatus::Error
           log::Level::Error
           log::LevelFilter::Error
           notify::Error
           proptest::string::Error
           rand::Error
           regex::Error
           reqwest::Error
           rusqlite::Error
           serde::de::Error
           serde::de::value::Error
           serde::ser::Error
           serde_json::Error
           syn::Error
           tokio::io::Error
           tokio::time::error::Error
           tower_http::classify::GrpcFailureClass::Error
           tower_http::classify::ServerErrorsFailureClass::Error
           tower_http::classify::StatusInRangeFailureClass::Error
           tracing_subscriber::reload::Error
           uuid::Error
           walkdir::Error
           warp::Error

warning: unused import: `llmkg::*`
 --> tests\simple_link_test.rs:3:9
  |
3 |     use llmkg::*;
  |         ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `KnowledgeGraph`
  --> tests\simple_link_test.rs:14:21
   |
14 |         use llmkg::{KnowledgeGraph, Result, Error};
   |                     ^^^^^^^^^^^^^^

For more information about this error, try `rustc --explain E0432`.
warning: `llmkg` (test "simple_link_test") generated 2 warnings
error: could not compile `llmkg` (test "simple_link_test") due to 1 previous error; 2 warnings emitted
warning: build failed, waiting for other jobs to finish...
warning: unnecessary parentheses around block return value
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:359:21
    |
359 |                     (entity_quality * 0.3 + relation_quality * 0.3 + entity_count_score * 0.2 + relation_count_score * 0.2)
    |                     ^                                                                                                     ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
359 -                     (entity_quality * 0.3 + relation_quality * 0.3 + entity_count_score * 0.2 + relation_count_score * 0.2)
359 +                     entity_quality * 0.3 + relation_quality * 0.3 + entity_count_score * 0.2 + relation_count_score * 0.2
    |

warning: unused import: `std::path::PathBuf`
  --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:23:5
   |
23 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Deserialize` and `Serialize`
 --> tests\enhanced_knowledge_storage\mocks\comprehensive_mock_data.rs:9:13
  |
9 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
   |
15 | pub use processing_mocks::*;
   |         ^^^^^^^^^^^^^^^^^^^ the name `ProcessingResult` in the type namespace is first re-exported here
16 | pub use embedding_mocks::*;
17 | pub use comprehensive_mock_data::*;
   |         -------------------------- but the name `ProcessingResult` in the type namespace is also re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: ambiguous glob re-exports
  --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
   |
15 | pub use processing_mocks::*;
   |         ^^^^^^^^^^^^^^^^^^^ the name `EntityType` in the type namespace is first re-exported here
16 | pub use embedding_mocks::*;
17 | pub use comprehensive_mock_data::*;
   |         -------------------------- but the name `EntityType` in the type namespace is also re-exported here

warning: `EntityType` is ambiguous
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:259:53
    |
259 |         assert!(matches!(person_entity.entity_type, EntityType::Person));
    |                                                     ^^^^^^^^^^ ambiguous name
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
    = note: ambiguous because of multiple glob imports of a name in the same module
note: `EntityType` could refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
    |
15  | pub use processing_mocks::*;
    |         ^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
note: `EntityType` could also refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:17:9
    |
17  | pub use comprehensive_mock_data::*;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
    = note: `#[warn(ambiguous_glob_imports)]` on by default

warning: `EntityType` is ambiguous
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:265:50
    |
265 |         assert!(matches!(org_entity.entity_type, EntityType::Organization));
    |                                                  ^^^^^^^^^^ ambiguous name
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
    = note: ambiguous because of multiple glob imports of a name in the same module
note: `EntityType` could refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
    |
15  | pub use processing_mocks::*;
    |         ^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
note: `EntityType` could also refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:17:9
    |
17  | pub use comprehensive_mock_data::*;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate

warning: `EntityType` is ambiguous
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:277:30
    |
277 |                 entity_type: EntityType::Person,
    |                              ^^^^^^^^^^ ambiguous name
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
    = note: ambiguous because of multiple glob imports of a name in the same module
note: `EntityType` could refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
    |
15  | pub use processing_mocks::*;
    |         ^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
note: `EntityType` could also refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:17:9
    |
17  | pub use comprehensive_mock_data::*;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate

warning: `EntityType` is ambiguous
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:283:30
    |
283 |                 entity_type: EntityType::Concept,
    |                              ^^^^^^^^^^ ambiguous name
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
    = note: ambiguous because of multiple glob imports of a name in the same module
note: `EntityType` could refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
    |
15  | pub use processing_mocks::*;
    |         ^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
note: `EntityType` could also refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:17:9
    |
17  | pub use comprehensive_mock_data::*;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate

warning: `EntityType` is ambiguous
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:308:26
    |
308 |             entity_type: EntityType::Person,
    |                          ^^^^^^^^^^ ambiguous name
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
    = note: ambiguous because of multiple glob imports of a name in the same module
note: `EntityType` could refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:15:9
    |
15  | pub use processing_mocks::*;
    |         ^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate
note: `EntityType` could also refer to the enum imported here
   --> tests\enhanced_knowledge_storage\mocks\mod.rs:17:9
    |
17  | pub use comprehensive_mock_data::*;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: consider adding an explicit import of `EntityType` to disambiguate

warning: unused import: `super::*`
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:610:9
    |
610 |     use super::*;
    |         ^^^^^^^^

warning: unused import: `tokio::test`
 --> tests\enhanced_knowledge_storage\comprehensive_mock_validation_test.rs:7:5
  |
7 | use tokio::test;
  |     ^^^^^^^^^^^

warning: `llmkg` (test "minimal_validation") generated 3 warnings
error[E0599]: the method `join` exists for struct `Vec<&String>`, but its trait bounds were not satisfied
   --> tests\enhanced_knowledge_storage\acceptance\end_to_end_workflow_validation.rs:606:14
    |
603 |           let combined_content = results.iter()
    |  ________________________________-
604 | |             .map(|r| &r.content)
605 | |             .collect::<Vec<_>>()
606 | |             .join(" ");
    | |             -^^^^ method cannot be called on `Vec<&String>` due to unsatisfied trait bounds
    | |_____________|
    |
    |
    = note: the following trait bounds were not satisfied:
            `[&std::string::String]: std::slice::Join<_>`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:406:41
    |
406 |                 let stats = memory_lock.get_stats();
    |                                         ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:413:59
    |
413 |             let embedding_results = system.embedding_tier.find_similar(query, 3)
    |                                                           ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `predicate_string` found for reference `&&comprehensive_mock_data::ComplexRelationship` in the current scope
    --> tests\enhanced_knowledge_storage\mocks\comprehensive_mock_data.rs:1041:78
     |
1041 |                 p.iter().map(|rel| format!("{} -> {} -> {}", rel.source, rel.predicate_string(), rel.target)).collect::<Vec<_>>()
     |                                                                              ^^^^^^^^^^^^^^^^ method not found in `&&ComplexRelationship`
     |
help: one of the expressions' fields has a method of the same name
     |
1041 |                 p.iter().map(|rel| format!("{} -> {} -> {}", rel.source, rel.predicate.predicate_string(), rel.target)).collect::<Vec<_>>()
     |                                                                              ++++++++++

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
  --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:92:25
   |
92 |                         attributes: [
   |                         ^^^^^^^^^^ `llmkg::EntityData` does not have this field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
  --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:95:72
   |
95 | ...                   ("confidence".to_string(), AttributeValue::Float(entity.confidence)),
   |                                                                  ^^^^^ variant or associated item not found in `AttributeValue`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
  --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:97:75
   |
97 | ...                   ("quality_score".to_string(), AttributeValue::Float(quality_score)),
   |                                                                     ^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:103:25
    |
103 |                         format!("{}_{}", document_id, entity.id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:102:32
    |
102 |                     graph_lock.add_entity(
    |                                ^^^^^^^^^^
103 |                         format!("{}_{}", document_id, entity.id),
104 |                         entity_data
    |                         ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
103 -                         format!("{}_{}", document_id, entity.id),
104 -                         entity_data
103 +                         format!("{}_{}", document_id, entity.id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:111:25
    |
111 |                         target: format!("{}_{}", document_id, relation.object_id),
    |                         ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:112:25
    |
112 |                         relationship_type: relation.predicate.clone(),
    |                         ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:114:25
    |
114 |                         properties: [
    |                         ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:116:72
    |
116 | ...                   ("confidence".to_string(), AttributeValue::Float(relation.confidence)),
    |                                                                  ^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:121:25
    |
121 |                         format!("{}_{}", document_id, relation.subject_id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:120:32
    |
120 |                       graph_lock.add_relationship(
    |  ________________________________^^^^^^^^^^^^^^^^-
121 | |                         format!("{}_{}", document_id, relation.subject_id),
122 | |                         relationship
    | |                         ------------ expected `EntityKey`, found `Relationship`
123 | |                     ).map_err(|e| format!("Failed to store relationship: {:?}", e))?;
    | |_____________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
120 -                     graph_lock.add_relationship(
121 -                         format!("{}_{}", document_id, relation.subject_id),
122 -                         relationship
123 -                     ).map_err(|e| format!("Failed to store relationship: {:?}", e))?;
120 +                     graph_lock.add_relationship(format!("{}_{}", document_id, relation.subject_id), /* EntityKey */, /* f32 */).map_err(|e| format!("Failed to store relationship: {:?}", e))?;
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:143:38
    |
143 |                 self.embedding_store.add_embedding(
    |                 ---------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:153:37
    |
153 |               let document_metadata = serde_json::json!({
    |  _____________________________________^
154 | |                 "document_id": document_id,
155 | |                 "content": content,
156 | |                 "extraction": extraction,
...   |
168 | |                 "processed_at": chrono::Utc::now().to_rfc3339()
169 | |             });
    | |              ^
    | |              |
    | |______________the trait `Serialize` is not implemented for `ExtractionResult`
    |                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:171:26
    |
171 |             self.storage.store(
    |             -------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:229:36
    |
229 |             let stats = graph_lock.get_stats();
    |                                    ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:234:17
    |
234 |                 llmkg::extraction::Entity {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:242:54
    |
242 |             let reasoning_result = self.orchestrator.process_complex_query(
    |                                    ------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `max_reasoning_depth`
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:35:17
   |
35 |                 max_reasoning_depth: 10, // Allow deeper reasoning
   |                 ^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `confidence_threshold`
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:36:17
   |
36 |                 confidence_threshold: 0.3, // Lower threshold for exploration
   |                 ^^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `enable_creative_reasoning`
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:37:17
   |
37 |                 enable_creative_reasoning: true,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `timeout_seconds`
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:38:17
   |
38 |                 timeout_seconds: 60, // Longer timeout for complex reasoning
   |                 ^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:40:32
   |
40 |             let orchestrator = CognitiveOrchestrator::new(config);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ ------ argument #1 of type `std::sync::Arc<llmkg::BrainEnhancedKnowledgeGraph>` is missing
   |
note: associated function defined here
  --> C:\code\LLMKG\src\cognitive\orchestrator.rs:61:18
   |
61 |     pub async fn new(
   |                  ^^^
help: provide the argument
   |
40 |             let orchestrator = CognitiveOrchestrator::new(/* std::sync::Arc<llmkg::BrainEnhancedKnowledgeGraph> */, config);
   |                                                           +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:46:17
   |
46 |                 orchestrator,
   |                 ^^^^^^^^^^^^ expected `CognitiveOrchestrator`, found future

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
  --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:98:29
   |
98 | ...                   attributes: [
   |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:101:76
    |
101 | ...                   ("confidence".to_string(), AttributeValue::Float(entity.confidence)),
    |                                                                  ^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:108:29
    |
108 | ...                   format!("{}_{}", category, entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:107:36
    |
107 |                         graph_lock.add_entity(
    |                                    ^^^^^^^^^^
108 |                             format!("{}_{}", category, entity.id),
109 |                             entity_data
    |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
108 -                             format!("{}_{}", category, entity.id),
109 -                             entity_data
108 +                             format!("{}_{}", category, entity.id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:115:29
    |
115 | ...                   target: format!("{}_{}", category, relation.object_id),
    |                       ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:116:29
    |
116 | ...                   relationship_type: relation.predicate.clone(),
    |                       ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:118:29
    |
118 | ...                   properties: [
    |                       ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:125:29
    |
125 | ...                   format!("{}_{}", category, relation.subject_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:124:36
    |
124 |                           graph_lock.add_relationship(
    |  ____________________________________^^^^^^^^^^^^^^^^-
125 | |                             format!("{}_{}", category, relation.subject_id),
126 | |                             relationship
    | |                             ------------ expected `EntityKey`, found `Relationship`
127 | |                         ).map_err(|e| format!("Failed to add relationship from {}: {:?}", category, e))?;
    | |_________________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
124 -                         graph_lock.add_relationship(
125 -                             format!("{}_{}", category, relation.subject_id),
126 -                             relationship
127 -                         ).map_err(|e| format!("Failed to add relationship from {}: {:?}", category, e))?;
124 +                         graph_lock.add_relationship(format!("{}_{}", category, relation.subject_id), /* EntityKey */, /* f32 */).map_err(|e| format!("Failed to add relationship from {}: {:?}", category, e))?;
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:142:42
    |
142 |                     self.embedding_store.add_embedding(
    |                     ---------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:157:36
    |
157 |             let stats = graph_lock.get_stats();
    |                                    ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:162:17
    |
162 |                 llmkg::extraction::Entity {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:170:54
    |
170 |             let reasoning_result = self.orchestrator.process_complex_query(
    |                                    ------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:33:46
    |
33  |             let graph = Arc::new(RwLock::new(KnowledgeGraph::new()));
    |                                              ^^^^^^^^^^^^^^^^^^^-- argument #1 of type `usize` is missing
    |
note: associated function defined here
   --> C:\code\LLMKG\src\core\graph\graph_core.rs:302:12
    |
302 |     pub fn new(embedding_dim: usize) -> Result<Self> {
    |            ^^^
help: provide the argument
    |
33  |             let graph = Arc::new(RwLock::new(KnowledgeGraph::new(/* usize */)));
    |                                                                  +++++++++++

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:35:35
   |
35 |             let embedding_store = EmbeddingStore::new(384).expect("Failed to create embedding store");
   |                                   ^^^^^^^^^^^^^^^^^^^----- argument #2 of type `usize` is missing
   |
note: associated function defined here
  --> C:\code\LLMKG\src\embedding\store.rs:14:12
   |
14 |     pub fn new(dimension: usize, subvector_count: usize) -> Result<Self> {
   |            ^^^
help: provide the argument
   |
35 |             let embedding_store = EmbeddingStore::new(384, /* usize */).expect("Failed to create embedding store");
   |                                                          +++++++++++++

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `max_reasoning_depth`
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:37:17
   |
37 |                 max_reasoning_depth: 5,
   |                 ^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `confidence_threshold`
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:38:17
   |
38 |                 confidence_threshold: 0.4,
   |                 ^^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `enable_creative_reasoning`
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:39:17
   |
39 |                 enable_creative_reasoning: true,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0560]: struct `llmkg::CognitiveOrchestratorConfig` has no field named `timeout_seconds`
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:40:17
   |
40 |                 timeout_seconds: 10, // Shorter timeout for load testing
   |                 ^^^^^^^^^^^^^^^ `llmkg::CognitiveOrchestratorConfig` does not have this field
   |
   = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:42:32
   |
42 |             let orchestrator = CognitiveOrchestrator::new(config);
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ ------ argument #1 of type `std::sync::Arc<llmkg::BrainEnhancedKnowledgeGraph>` is missing
   |
note: associated function defined here
  --> C:\code\LLMKG\src\cognitive\orchestrator.rs:61:18
   |
61 |     pub async fn new(
   |                  ^^^
help: provide the argument
   |
42 |             let orchestrator = CognitiveOrchestrator::new(/* std::sync::Arc<llmkg::BrainEnhancedKnowledgeGraph> */, config);
   |                                                           +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:45:17
   |
45 |                 graph,
   |                 ^^^^^ expected `Arc<RwLock<KnowledgeGraph>>`, found `Arc<RwLock<Result<KnowledgeGraph, ...>>>`
   |
   = note: expected struct `std::sync::Arc<tokio::sync::RwLock<llmkg::KnowledgeGraph>>`
              found struct `std::sync::Arc<tokio::sync::RwLock<Result<llmkg::KnowledgeGraph, llmkg::GraphError>>>`

error[E0308]: mismatched types
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:48:17
   |
48 |                 orchestrator,
   |                 ^^^^^^^^^^^^ expected `CognitiveOrchestrator`, found future

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
  --> tests\enhanced_knowledge_integration\performance_load_tests.rs:97:25
   |
97 |                         attributes: [
   |                         ^^^^^^^^^^ `llmkg::EntityData` does not have this field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:105:25
    |
105 |                         format!("{}_{}", doc_id, entity.id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:104:32
    |
104 |                     graph_lock.add_entity(
    |                                ^^^^^^^^^^
105 |                         format!("{}_{}", doc_id, entity.id),
106 |                         entity_data
    |                         ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
105 -                         format!("{}_{}", doc_id, entity.id),
106 -                         entity_data
105 +                         format!("{}_{}", doc_id, entity.id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:112:25
    |
112 |                         target: format!("{}_{}", doc_id, relation.object_id),
    |                         ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:113:25
    |
113 |                         relationship_type: relation.predicate.clone(),
    |                         ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:115:25
    |
115 |                         properties: [
    |                         ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:121:25
    |
121 |                         format!("{}_{}", doc_id, relation.subject_id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:120:32
    |
120 |                       graph_lock.add_relationship(
    |  ________________________________^^^^^^^^^^^^^^^^-
121 | |                         format!("{}_{}", doc_id, relation.subject_id),
122 | |                         relationship
    | |                         ------------ expected `EntityKey`, found `Relationship`
123 | |                     ).map_err(|e| format!("Relationship storage failed: {:?}", e))?;
    | |_____________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
120 -                     graph_lock.add_relationship(
121 -                         format!("{}_{}", doc_id, relation.subject_id),
122 -                         relationship
123 -                     ).map_err(|e| format!("Relationship storage failed: {:?}", e))?;
120 +                     graph_lock.add_relationship(format!("{}_{}", doc_id, relation.subject_id), /* EntityKey */, /* f32 */).map_err(|e| format!("Relationship storage failed: {:?}", e))?;
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:133:38
    |
133 |                 self.embedding_store.add_embedding(
    |                 ---------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:153:25
    |
153 |                         llmkg::extraction::Entity {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for reference `&llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:161:47
    |
161 |                     let result = orchestrator.process_complex_query(
    |                                  -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `&CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:198:28
    |
198 |                 graph_lock.get_stats()
    |                            ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_memory_usage` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:203:28
    |
203 |                 graph_lock.get_memory_usage()
    |                            ^^^^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `model_mocks::ModelBackendTrait` defines an item `get_memory_usage`, perhaps you need to implement it
   --> tests\enhanced_knowledge_storage\mocks\model_mocks.rs:99:1
    |
99  | pub trait ModelBackendTrait {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `memory_usage` with a similar name
    |
203 -                 graph_lock.get_memory_usage()
203 +                 graph_lock.memory_usage()
    |

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:206:55
    |
206 |             let embedding_info = self.embedding_store.get_info();
    |                                                       ^^^^^^^^ method not found in `EmbeddingStore`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
  --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:74:21
   |
74 |                     attributes: [
   |                     ^^^^^^^^^^ `llmkg::EntityData` does not have this field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
  --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:77:68
   |
77 |                         ("confidence".to_string(), AttributeValue::Float(entity.confidence)),
   |                                                                    ^^^^^ variant or associated item not found in `AttributeValue`

error[E0609]: no field `attributes` on type `llmkg::EntityData`
  --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:85:35
   |
85 |                     enriched_data.attributes.insert(
   |                                   ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0609]: no field `attributes` on type `llmkg::EntityData`
  --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:89:35
   |
89 |                     enriched_data.attributes.insert(
   |                                   ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:102:32
    |
102 |                     graph_lock.add_entity(entity_id.clone(), entity_data.clone())
    |                                ^^^^^^^^^^ ----------------- unexpected argument #1 of type `std::string::String`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
102 -                     graph_lock.add_entity(entity_id.clone(), entity_data.clone())
102 +                     graph_lock.add_entity(entity_data.clone())
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:108:25
    |
108 |                         target: relation.object_id.clone(),
    |                         ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:109:25
    |
109 |                         relationship_type: relation.predicate.clone(),
    |                         ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:111:25
    |
111 |                         properties: [
    |                         ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:113:72
    |
113 | ...                   ("confidence".to_string(), AttributeValue::Float(relation.confidence)),
    |                                                                  ^^^^^ variant or associated item not found in `AttributeValue`

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:117:32
    |
117 |                       graph_lock.add_relationship(
    |  ________________________________^^^^^^^^^^^^^^^^-
118 | |                         relation.subject_id.clone(),
    | |                         --------------------------- expected `EntityKey`, found `String`
119 | |                         relationship
    | |                         ------------ expected `EntityKey`, found `Relationship`
120 | |                     ).expect("Failed to store relationship in graph");
    | |_____________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
117 -                     graph_lock.add_relationship(
118 -                         relation.subject_id.clone(),
119 -                         relationship
120 -                     ).expect("Failed to store relationship in graph");
117 +                     graph_lock.add_relationship(/* EntityKey */, /* EntityKey */, /* f32 */).expect("Failed to store relationship in graph");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:131:33
    |
131 |                 embedding_store.add_embedding(&entity.id, embedding)
    |                                 ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:136:57
     |
136  |             let serialized_data = serde_json::to_string(&extraction)
     |                                   --------------------- ^^^^^^^^^^^ the trait `Serialize` is not implemented for `ExtractionResult`
     |                                   |
     |                                   required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 653 others
note: required by a bound in `serde_json::to_string`
    --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\ser.rs:2247:17
     |
2245 | pub fn to_string<T>(value: &T) -> Result<String>
     |        --------- required by a bound in this function
2246 | where
2247 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:139:21
    |
139 |             storage.store(&format!("extraction_{}", doc_id), serialized_data.as_bytes())
    |                     ^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:148:32
    |
148 |         let stats = graph_lock.get_stats();
    |                                ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:153:46
    |
153 |         let embedding_info = embedding_store.get_info();
    |                                              ^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:158:39
    |
158 |             let stored_data = storage.retrieve(&format!("extraction_{}", doc_id))
    |                                       ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:192:25
    |
192 |                         attributes: [
    |                         ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:198:43
    |
198 |                     graph_lock.add_entity(format!("{}_{}", entity.id, doc_id), entity_data)
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:198:32
    |
198 |                     graph_lock.add_entity(format!("{}_{}", entity.id, doc_id), entity_data)
    |                                ^^^^^^^^^^                                      ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
198 -                     graph_lock.add_entity(format!("{}_{}", entity.id, doc_id), entity_data)
198 +                     graph_lock.add_entity(format!("{}_{}", entity.id, doc_id))
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:204:25
    |
204 |                         target: format!("{}_{}", relation.object_id, doc_id),
    |                         ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:205:25
    |
205 |                         relationship_type: relation.predicate.clone(),
    |                         ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:207:25
    |
207 |                         properties: [
    |                         ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:212:25
    |
212 |                         format!("{}_{}", relation.subject_id, doc_id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:211:32
    |
211 |                       graph_lock.add_relationship(
    |  ________________________________^^^^^^^^^^^^^^^^-
212 | |                         format!("{}_{}", relation.subject_id, doc_id),
213 | |                         relationship
    | |                         ------------ expected `EntityKey`, found `Relationship`
214 | |                     ).expect("Failed to add relationship");
    | |_____________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
211 -                     graph_lock.add_relationship(
212 -                         format!("{}_{}", relation.subject_id, doc_id),
213 -                         relationship
214 -                     ).expect("Failed to add relationship");
211 +                     graph_lock.add_relationship(format!("{}_{}", relation.subject_id, doc_id), /* EntityKey */, /* f32 */).expect("Failed to add relationship");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:223:33
    |
223 |                 embedding_store.add_embedding(&format!("{}_{}", entity.id, doc_id), embedding)
    |                                 ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:240:39
    |
240 |                 graph_lock.get_entity(&entity_id).map(|_| entity_id)
    |                            ---------- ^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                            |
    |                            arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:249:73
    |
249 |                 let relationships = graph_lock.get_entity_relationships(entity_id)
    |                                                ------------------------ ^^^^^^^^^ expected `EntityKey`, found `&String`
    |                                                |
    |                                                arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:198:12
    |
198 |     pub fn get_entity_relationships(&self, entity: EntityKey) -> Vec<Relationship> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `unwrap_or_default` found for struct `Vec<llmkg::Relationship>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:250:22
    |
249 |                   let relationships = graph_lock.get_entity_relationships(entity_id)
    |  _____________________________________-
250 | |                     .unwrap_or_default();
    | |                     -^^^^^^^^^^^^^^^^^ method not found in `Vec<Relationship>`
    | |_____________________|
    |

error[E0599]: no method named `find_similar_by_vector` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:259:48
    |
259 |         let similar_entities = embedding_store.find_similar_by_vector(&query_embedding, 3)
    |                                                ^^^^^^^^^^^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:278:49
    |
278 |             let reasoning_result = orchestrator.process_complex_query(
    |                                    -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:296:49
    |
296 |         let embedding_results = embedding_store.find_similar(test_entity, 5)
    |                                                 ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:304:38
    |
304 |             if graph_lock.get_entity(&entity_id).is_some() {
    |                           ---------- ^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                           |
    |                           arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:383:37
    |
383 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:385:87
    |
385 | ...                   ("quality_score".to_string(), AttributeValue::Float(quality_score)),
    |                                                                     ^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:391:37
    |
391 | ...                   format!("quality_{}_{}", entity.id, doc_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:390:44
    |
390 | ...                   graph_lock.add_entity(
    |                                  ^^^^^^^^^^
391 | ...                       format!("quality_{}_{}", entity.id, doc_id),
392 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
391 -                                     format!("quality_{}_{}", entity.id, doc_id),
392 -                                     entity_data
391 +                                     format!("quality_{}_{}", entity.id, doc_id)
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:403:45
    |
403 | ...                   embedding_store.add_embedding(
    |                       ----------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: can't compare `&str` with `str`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:425:70
    |
425 |             .filter(|(_, expected_quality, score)| *expected_quality == "high_quality" && *score > 0.5)
    |                                                                      ^^ no implementation for `&str == str`
    |
    = help: the trait `PartialEq<str>` is not implemented for `&str`
    = note: required for `&&str` to implement `PartialEq<&str>`
help: consider dereferencing here
    |
425 |             .filter(|(_, expected_quality, score)| **expected_quality == "high_quality" && *score > 0.5)
    |                                                    +

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:426:35
    |
426 |             .map(|(doc_id, _, _)| llmkg::extraction::Entity {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:436:45
    |
436 |         let reasoning_result = orchestrator.process_complex_query(
    |                                -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:448:32
    |
448 |         let stats = graph_lock.get_stats();
    |                                ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:454:54
    |
454 |         let quality_search_results = embedding_store.find_similar("high_quality_concept", 5)
    |                                                      ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:517:29
    |
517 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:521:82
    |
521 | ...                   ("processing_order".to_string(), AttributeValue::Integer(*doc_id as i64)),
    |                                                                        ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:526:29
    |
526 | ...                   format!("batch_{}_{}", entity.id, doc_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:525:36
    |
525 |                         graph_lock.add_entity(
    |                                    ^^^^^^^^^^
526 |                             format!("batch_{}_{}", entity.id, doc_id),
527 |                             entity_data
    |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
526 -                             format!("batch_{}_{}", entity.id, doc_id),
527 -                             entity_data
526 +                             format!("batch_{}_{}", entity.id, doc_id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:534:29
    |
534 | ...                   target: format!("batch_{}_{}", relation.object_id, doc_id),
    |                       ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:535:29
    |
535 | ...                   relationship_type: relation.predicate.clone(),
    |                       ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:537:29
    |
537 | ...                   properties: [
    |                       ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:543:29
    |
543 | ...                   format!("batch_{}_{}", relation.subject_id, doc_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:542:36
    |
542 |                           graph_lock.add_relationship(
    |  ____________________________________^^^^^^^^^^^^^^^^-
543 | |                             format!("batch_{}_{}", relation.subject_id, doc_id),
544 | |                             relationship
    | |                             ------------ expected `EntityKey`, found `Relationship`
545 | |                         ).expect("Failed to add batch relationship");
    | |_________________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
542 -                         graph_lock.add_relationship(
543 -                             format!("batch_{}_{}", relation.subject_id, doc_id),
544 -                             relationship
545 -                         ).expect("Failed to add batch relationship");
542 +                         graph_lock.add_relationship(format!("batch_{}_{}", relation.subject_id, doc_id), /* EntityKey */, /* f32 */).expect("Failed to add batch relationship");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:558:37
    |
558 |                     embedding_store.add_embedding(
    |                     ----------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:566:52
     |
566  |             let batch_data = serde_json::to_string(&batch_extractions)
     |                              --------------------- ^^^^^^^^^^^^^^^^^^ the trait `Serialize` is not implemented for `ExtractionResult`
     |                              |
     |                              required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 653 others
     = note: required for `(usize, ExtractionResult)` to implement `Serialize`
     = note: 1 redundant requirement hidden
     = note: required for `Vec<(usize, ExtractionResult)>` to implement `Serialize`
note: required by a bound in `serde_json::to_string`
    --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\ser.rs:2247:17
     |
2245 | pub fn to_string<T>(value: &T) -> Result<String>
     |        --------- required by a bound in this function
2246 | where
2247 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:568:21
    |
568 |             storage.store(&format!("batch_{}", batch_idx), batch_data.as_bytes())
    |                     ^^^^^ method not found in `PersistentMMapStorage`

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:592:13
    |
592 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:600:51
    |
600 |         let batch_reasoning_result = orchestrator.process_complex_query(
    |                                      -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:615:55
    |
615 |         let batch_retrieval_results = embedding_store.find_similar("Topic 1", 10)
    |                                                       ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:622:21
    |
622 |             storage.retrieve(&format!("batch_{}", batch_idx)).is_ok()
    |                     ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:630:38
    |
630 |         let final_stats = graph_lock.get_stats();
    |                                      ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:672:25
    |
672 |                         attributes: [
    |                         ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:674:69
    |
674 | ...                   ("version".to_string(), AttributeValue::Integer(knowledge_version)),
    |                                                               ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:681:25
    |
681 |                         format!("v{}_{}", knowledge_version, entity.id),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:680:32
    |
680 |                     graph_lock.add_entity(
    |                                ^^^^^^^^^^
681 |                         format!("v{}_{}", knowledge_version, entity.id),
682 |                         entity_data
    |                         ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
681 -                         format!("v{}_{}", knowledge_version, entity.id),
682 -                         entity_data
681 +                         format!("v{}_{}", knowledge_version, entity.id)
    |

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:692:24
    |
692 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:720:86
    |
720 | ...                   if let Some(mut existing_entity) = graph_lock.get_entity(&existing_key).cloned() {
    |                                                                     ---------- ^^^^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                                                                     |
    |                                                                     arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0599]: no method named `cloned` found for enum `std::option::Option<(EntityMeta, llmkg::EntityData)>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:720:101
    |
720 | ...                   if let Some(mut existing_entity) = graph_lock.get_entity(&existing_key).cloned() {
    |                                                                                               ^^^^^^ `std::option::Option<(EntityMeta, llmkg::EntityData)>` is not an iterator
    |
help: call `.into_iter()` first
    |
720 |                             if let Some(mut existing_entity) = graph_lock.get_entity(&existing_key).into_iter().cloned() {
    |                                                                                                     ++++++++++++

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:733:37
    |
733 | ...                   format!("v{}_{}", knowledge_version, "Einstein"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:732:44
    |
732 | ...                   graph_lock.add_entity(
    |                                  ^^^^^^^^^^
733 | ...                       format!("v{}_{}", knowledge_version, "Einstein"),
734 | ...                       existing_entity
    |                           --------------- unexpected argument #2
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
733 -                                     format!("v{}_{}", knowledge_version, "Einstein"),
734 -                                     existing_entity
733 +                                     format!("v{}_{}", knowledge_version, "Einstein")
    |

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:746:33
    |
746 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:750:77
    |
750 | ...                   ("version".to_string(), AttributeValue::Integer(knowledge_version)),
    |                                                               ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:756:33
    |
756 | ...                   format!("v{}_corrected_{}", knowledge_version, entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:755:40
    |
755 | ...                   graph_lock.add_entity(
    |                                  ^^^^^^^^^^
756 | ...                       format!("v{}_corrected_{}", knowledge_version, entity.id),
757 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
756 -                                 format!("v{}_corrected_{}", knowledge_version, entity.id),
757 -                                 entity_data
756 +                                 format!("v{}_corrected_{}", knowledge_version, entity.id)
    |

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:767:29
    |
767 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:769:73
    |
769 | ...                   ("version".to_string(), AttributeValue::Integer(knowledge_version)),
    |                                                               ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:776:29
    |
776 | ...                   format!("v{}_new_{}", knowledge_version, entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:775:36
    |
775 |                         graph_lock.add_entity(
    |                                    ^^^^^^^^^^
776 |                             format!("v{}_new_{}", knowledge_version, entity.id),
777 |                             entity_data
    |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
776 -                             format!("v{}_new_{}", knowledge_version, entity.id),
777 -                             entity_data
776 +                             format!("v{}_new_{}", knowledge_version, entity.id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:786:29
    |
786 | ...                   target: format!("v{}_{}_{}", knowledge_version, relation.object_id, "Curie"),
    |                       ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:787:29
    |
787 | ...                   relationship_type: "shared_achievement_with".to_string(),
    |                       ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:789:29
    |
789 | ...                   properties: [
    |                       ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:791:73
    |
791 | ...                   ("version".to_string(), AttributeValue::Integer(knowledge_version)),
    |                                                               ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:796:29
    |
796 | ...                   format!("v{}_{}_{}", knowledge_version, relation.subject_id, "Einstein"),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:795:36
    |
795 |                           graph_lock.add_relationship(
    |  ____________________________________^^^^^^^^^^^^^^^^-
796 | |                             format!("v{}_{}_{}", knowledge_version, relation.subject_id, "Einstein"),
797 | |                             relationship
    | |                             ------------ expected `EntityKey`, found `Relationship`
798 | |                         ).expect("Failed to add incremental relationship");
    | |_________________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
795 -                         graph_lock.add_relationship(
796 -                             format!("v{}_{}_{}", knowledge_version, relation.subject_id, "Einstein"),
797 -                             relationship
798 -                         ).expect("Failed to add incremental relationship");
795 +                         graph_lock.add_relationship(format!("v{}_{}_{}", knowledge_version, relation.subject_id, "Einstein"), /* EntityKey */, /* f32 */).expect("Failed to add incremental relationship");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:809:33
    |
809 |                 embedding_store.add_embedding(
    |                 ----------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:816:31
    |
816 |               let update_data = serde_json::json!({
    |  _______________________________^
817 | |                 "type": update_type,
818 | |                 "version": knowledge_version,
819 | |                 "extraction": extraction,
820 | |                 "timestamp": chrono::Utc::now().to_rfc3339()
821 | |             });
    | |              ^
    | |              |
    | |______________the trait `Serialize` is not implemented for `ExtractionResult`
    |                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:823:21
    |
823 |             storage.store(
    |             --------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:839:45
    |
839 |         let reasoning_result = orchestrator.process_complex_query(
    |                                -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:852:24
    |
852 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:860:46
    |
860 |         let version_search = embedding_store.find_similar("Einstein version", 5)
    |                                              ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:868:45
    |
868 |                 let stored_update = storage.retrieve(&format!("incremental_{}_{}", version, update_type));
    |                                             ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:892:14
    |
892 |             ("This is a very long document ".repeat(1000), "extremely_long"),
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
help: consider borrowing here
    |
892 |             (&"This is a very long document ".repeat(1000), "extremely_long"),
    |              +

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:936:45
    |
936 | ...                   llmkg::extraction::Entity {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:978:37
    |
978 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:982:92
    |
982 | ...                   ("processing_time_ms".to_string(), AttributeValue::Integer(processing_time.as_millis() as i64)),
    |                                                                          ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:987:37
    |
987 | ...                   format!("recovery_{}_{}", entity.id, doc_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:986:50
    |
986 | ...                   match graph_lock.add_entity(
    |                                        ^^^^^^^^^^
987 | ...                       format!("recovery_{}_{}", entity.id, doc_id),
988 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
987 -                                     format!("recovery_{}_{}", entity.id, doc_id),
988 -                                     entity_data
987 +                                     format!("recovery_{}_{}", entity.id, doc_id)
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1005:55
     |
1005 | ...                   match embedding_store.add_embedding(&format!("recovery_{}_{}", entity.id, doc_id), embedding) {
     |                                             ^^^^^^^^^^^^^
     |
help: there is a method `get_embedding` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\embedding\store.rs:40:5
     |
40   |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1015:49
     |
1015 |   ...                   let recovery_data = serde_json::json!({
     |  ___________________________________________^
1016 | | ...                       "error_type": error_type,
1017 | | ...                       "recovery_type": recovery_type,
1018 | | ...                       "processing_time_ms": processing_time.as_millis(),
...    |
1021 | | ...                       "timestamp": chrono::Utc::now().to_rfc3339()
1022 | | ...                   });
     | |                        ^
     | |                        |
     | |________________________the trait `Serialize` is not implemented for `ExtractionResult`
     |                          required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 653 others
     = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
    --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
     |
988  | pub fn to_value<T>(value: T) -> Result<Value, Error>
     |        -------- required by a bound in this function
989  | where
990  |     T: Serialize,
     |        ^^^^^^^^^ required by this bound in `to_value`
     = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1024:37
     |
1024 | ...                   storage.store(
     |                       --------^^^^^ method not found in `PersistentMMapStorage`

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1058:13
     |
1058 |             llmkg::extraction::Entity {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1064:13
     |
1064 |             llmkg::extraction::Entity {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1070:13
     |
1070 |             llmkg::extraction::Entity {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1078:54
     |
1078 |         let cognitive_recovery_result = orchestrator.process_complex_query(
     |                                         -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1087:24
     |
1087 |             graph_lock.get_stats()
     |                        ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
    --> tests\enhanced_knowledge_storage\integration\knowledge_processing_integration.rs:1090:52
     |
1090 |         let final_embedding_info = embedding_store.get_info();
     |                                                    ^^^^^^^^ method not found in `EmbeddingStore`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
  --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:97:33
   |
97 | ...                   attributes: [
   |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
   |
   = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:107:33
    |
107 | ...                   format!("hot_{}", entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:106:41
    |
106 | ...                   memory_lock.add_entity(
    |                                   ^^^^^^^^^^
107 | ...                       format!("hot_{}", entity.id),
108 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
107 -                                 format!("hot_{}", entity.id),
108 -                                 entity_data
107 +                                 format!("hot_{}", entity.id)
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:114:33
    |
114 | ...                   target: format!("hot_{}", relation.object_id),
    |                       ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:115:33
    |
115 | ...                   relationship_type: relation.predicate.clone(),
    |                       ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:117:33
    |
117 | ...                   properties: [
    |                       ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:123:33
    |
123 | ...                   format!("hot_{}", relation.subject_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityKey`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:122:41
    |
122 |   ...                   memory_lock.add_relationship(
    |  ___________________________________^^^^^^^^^^^^^^^^-
123 | | ...                       format!("hot_{}", relation.subject_id),
124 | | ...                       relationship
    | |                           ------------ expected `EntityKey`, found `Relationship`
125 | | ...                   ).expect("Failed to add hot relationship");
    | |_______________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
122 -                             memory_lock.add_relationship(
123 -                                 format!("hot_{}", relation.subject_id),
124 -                                 relationship
125 -                             ).expect("Failed to add hot relationship");
122 +                             memory_lock.add_relationship(format!("hot_{}", relation.subject_id), /* EntityKey */, /* f32 */).expect("Failed to add hot relationship");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:135:47
    |
135 |                         system.embedding_tier.add_embedding(
    |                         ----------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:143:37
    |
143 |                       let warm_data = serde_json::json!({
    |  _____________________________________^
144 | |                         "tier": "warm",
145 | |                         "priority": priority,
146 | |                         "extraction": extraction,
147 | |                         "document": document,
148 | |                         "timestamp": chrono::Utc::now().to_rfc3339()
149 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:151:44
    |
151 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:152:64
    |
152 |                         &format!("warm_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                ^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:162:37
    |
162 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:170:37
    |
170 | ...                   format!("warm_cached_{}", entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:169:45
    |
169 | ...                   memory_lock.add_entity(
    |                                   ^^^^^^^^^^
170 | ...                       format!("warm_cached_{}", entity.id),
171 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
170 -                                     format!("warm_cached_{}", entity.id),
171 -                                     entity_data
170 +                                     format!("warm_cached_{}", entity.id)
    |

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:179:37
    |
179 |                       let cold_data = serde_json::json!({
    |  _____________________________________^
180 | |                         "tier": "cold",
181 | |                         "priority": priority,
182 | |                         "extraction": extraction,
183 | |                         "access_frequency": "low",
184 | |                         "timestamp": chrono::Utc::now().to_rfc3339()
185 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:187:44
    |
187 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:188:64
    |
188 |                         &format!("cold_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:194:40
    |
194 |                       let archive_data = serde_json::json!({
    |  ________________________________________^
195 | |                         "tier": "archive",
196 | |                         "priority": priority,
197 | |                         "extraction": extraction,
...   |
200 | |                         "compression": "enabled"
201 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:203:41
    |
203 |                     system.archive_tier.store(
    |                     --------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:204:67
    |
204 |                         &format!("archive_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                   ^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:230:25
    |
230 |             memory_lock.get_stats()
    |                         ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:237:52
    |
237 |         let embedding_info = system.embedding_tier.get_info();
    |                                                    ^^^^^^^^ method not found in `EmbeddingStore`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:267:29
    |
267 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:275:29
    |
275 | ...                   format!("{}_{}", tier, entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:274:37
    |
274 |                         memory_lock.add_entity(
    |                                     ^^^^^^^^^^
275 |                             format!("{}_{}", tier, entity.id),
276 |                             entity_data
    |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
275 -                             format!("{}_{}", tier, entity.id),
276 -                             entity_data
275 +                             format!("{}_{}", tier, entity.id)
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:286:47
    |
286 |                         system.embedding_tier.add_embedding(
    |                         ----------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:293:37
    |
293 |                       let warm_data = serde_json::json!({
    |  _____________________________________^
294 | |                         "extraction": extraction,
295 | |                         "document": document,
296 | |                         "tier": tier
297 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:299:44
    |
299 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:300:74
    |
300 |                         &format!("warm_retrieval_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                          ^^^^^^^^^^^^^^^

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:310:47
    |
310 |                         system.embedding_tier.add_embedding(
    |                         ----------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:317:37
    |
317 |                       let cold_data = serde_json::json!({
    |  _____________________________________^
318 | |                         "extraction": extraction,
319 | |                         "document": document,
320 | |                         "tier": tier,
321 | |                         "indexed_at": chrono::Utc::now().to_rfc3339()
322 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:324:44
    |
324 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:325:74
    |
325 |                         &format!("cold_retrieval_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                          ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:330:40
    |
330 |                       let archive_data = serde_json::json!({
    |  ________________________________________^
331 | |                         "extraction": extraction,
332 | |                         "document": document,
333 | |                         "tier": tier,
...   |
339 | |                     });
    | |                      ^
    | |                      |
    | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
    |                        required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:341:41
    |
341 |                     system.archive_tier.store(
    |                     --------------------^^^^^ method not found in `PersistentMMapStorage`

warning: use of deprecated method `chrono::DateTime::<Tz>::timestamp_nanos`: use `timestamp_nanos_opt()` instead
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:342:77
    |
342 |                         &format!("archive_retrieval_{}", chrono::Utc::now().timestamp_nanos()),
    |                                                                             ^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:359:40
    |
359 |                 memory_lock.get_entity(&entity_key).map(|_| entity_key)
    |                             ---------- ^^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                             |
    |                             arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:373:56
    |
373 |         let similarity_results = system.embedding_tier.find_similar("relativity", 5)
    |                                                        ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:385:52
    |
385 |         let reasoning_result = system.orchestrator.process_complex_query(
    |                                --------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:444:40
    |
444 |                 memory_lock.get_entity(&entity_key)
    |                             ---------- ^^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                             |
    |                             arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0609]: no field `attributes` on type `(EntityMeta, llmkg::EntityData)`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:445:47
    |
445 |                     .and_then(|entity| entity.attributes.get("name"))
    |                                               ^^^^^^^^^^ unknown field

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:455:55
    |
455 |         let embedding_matches = system.embedding_tier.find_similar(test_entity, 5)
    |                                                       ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:493:32
    |
493 |               let initial_data = serde_json::json!({
    |  ________________________________^
494 | |                 "doc_id": doc_id,
495 | |                 "extraction": extraction,
496 | |                 "document": document,
...   |
500 | |                 "created_at": chrono::Utc::now().to_rfc3339()
501 | |             });
    | |              ^
    | |              |
    | |______________the trait `Serialize` is not implemented for `ExtractionResult`
    |                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:504:36
    |
504 |             system.persistent_tier.store(
    |             -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:517:39
    |
517 |                 system.embedding_tier.add_embedding(
    |                 ----------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:540:59
    |
540 |                 let current_data = system.persistent_tier.retrieve(&storage_key)
    |                                                           ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:579:37
    |
579 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Integer` found for enum `llmkg::AttributeValue` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:582:86
    |
582 | ...                   ("access_count".to_string(), AttributeValue::Integer(access_count)),
    |                                                                    ^^^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:589:37
    |
589 | ...                   format!("hot_migrated_{}", doc_id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:588:45
    |
588 | ...                   memory_lock.add_entity(
    |                                   ^^^^^^^^^^
589 | ...                       format!("hot_migrated_{}", doc_id),
590 | ...                       entity_data
    |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
589 -                                     format!("hot_migrated_{}", doc_id),
590 -                                     entity_data
589 +                                     format!("hot_migrated_{}", doc_id)
    |

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:601:52
    |
601 | ...                   system.persistent_tier.store(
    |                       -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:615:49
    |
615 | ...                   system.archive_tier.store(
    |                       --------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:626:52
    |
626 | ...                   system.persistent_tier.store(
    |                       -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:661:25
    |
661 |             memory_lock.get_stats()
    |                         ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:673:13
    |
673 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:681:57
    |
681 |         let post_migration_result = system.orchestrator.process_complex_query(
    |                                     --------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:704:52
    |
704 |                     assert!(memory_lock.get_entity(&hot_entity_key).is_some(),
    |                                         ---------- ^^^^^^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                                         |
    |                                         arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:710:60
    |
710 |                     let cold_data = system.persistent_tier.retrieve(&cold_key);
    |                                                            ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:717:60
    |
717 |                     let archive_data = system.archive_tier.retrieve(&archive_key);
    |                                                            ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:762:32
    |
762 |               let version_data = serde_json::json!({
    |  ________________________________^
763 | |                 "version": version,
764 | |                 "tier": tier,
765 | |                 "document": document,
...   |
769 | |                 "checksum": format!("{:x}", md5::compute(document.as_bytes()))
770 | |             });
    | |              ^
    | |              |
    | |______________the trait `Serialize` is not implemented for `ExtractionResult`
    |                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 653 others
    = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
   --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
    |
988 | pub fn to_value<T>(value: T) -> Result<Value, Error>
    |        -------- required by a bound in this function
989 | where
990 |     T: Serialize,
    |        ^^^^^^^^^ required by this bound in `to_value`
    = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `md5`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:769:45
    |
769 |                 "checksum": format!("{:x}", md5::compute(document.as_bytes()))
    |                                             ^^^ use of unresolved module or unlinked crate `md5`
    |
    = help: if you wanted to use a crate named `md5`, use `cargo add md5` to add it to your `Cargo.toml`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:778:29
    |
778 | ...                   attributes: [
    |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
    |
    = note: available fields are: `type_id`, `properties`, `embedding`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `md5`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:783:97
    |
783 | ...                   ("checksum".to_string(), AttributeValue::String(format!("{:x}", md5::compute(document.as_bytes())))),
    |                                                                                       ^^^ use of unresolved module or unlinked crate `md5`
    |
    = help: if you wanted to use a crate named `md5`, use `cargo add md5` to add it to your `Cargo.toml`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:788:29
    |
788 | ...                   format!("consistency_{}_{}", version, entity.id),
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:787:37
    |
787 |                         memory_lock.add_entity(
    |                                     ^^^^^^^^^^
788 |                             format!("consistency_{}_{}", version, entity.id),
789 |                             entity_data
    |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
    |
78  |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
    |            ^^^^^^^^^^
help: remove the extra argument
    |
788 -                             format!("consistency_{}_{}", version, entity.id),
789 -                             entity_data
788 +                             format!("consistency_{}_{}", version, entity.id)
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:800:47
    |
800 |                         system.embedding_tier.add_embedding(
    |                         ----------------------^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:807:44
    |
807 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:813:44
    |
813 |                     system.persistent_tier.store(
    |                     -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:819:41
    |
819 |                     system.archive_tier.store(
    |                     --------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:840:40
    |
840 |                 memory_lock.get_entity(&entity_key).map(|entity| {
    |                             ---------- ^^^^^^^^^^^ expected `EntityKey`, found `&String`
    |                             |
    |                             arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
    |
193 |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
    |            ^^^^^^^^^^

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:905:42
    |
905 |             match system.persistent_tier.retrieve(&retrieval_key) {
    |                                          ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:906:20
    |
906 |                 Ok(data) => {
    |                    ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:906:17
    |
906 |                 Ok(data) => {
    |                 ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Ok`
   --> C:\Users\hotra\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\core\src\result.rs:548:17
    |
548 | pub enum Result<T, E> {
    |                 ^ required by this bound in `Ok`
...
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:928:35
    |
928 |         match system.archive_tier.retrieve("consistency_archive_version_4") {
    |                                   ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:929:16
    |
929 |             Ok(data) => {
    |                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
    = note: all local variables must have a statically known size
    = help: unsized locals are gated as an unstable feature

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:929:13
    |
929 |             Ok(data) => {
    |             ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `Ok`
   --> C:\Users\hotra\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\core\src\result.rs:548:17
    |
548 | pub enum Result<T, E> {
    |                 ^ required by this bound in `Ok`
...
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:948:13
    |
948 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:956:60
    |
956 |         let consistency_query_result = system.orchestrator.process_complex_query(
    |                                        --------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1041:32
     |
1041 |               let storage_data = serde_json::json!({
     |  ________________________________^
1042 | |                 "doc_id": idx,
1043 | |                 "extraction": extraction,
1044 | |                 "document": document,
...    |
1048 | |                 "created_at": chrono::Utc::now().to_rfc3339()
1049 | |             });
     | |              ^
     | |              |
     | |______________the trait `Serialize` is not implemented for `ExtractionResult`
     |                required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 653 others
     = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
    --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
     |
988  | pub fn to_value<T>(value: T) -> Result<Value, Error>
     |        -------- required by a bound in this function
989  | where
990  |     T: Serialize,
     |        ^^^^^^^^^ required by this bound in `to_value`
     = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1052:36
     |
1052 |             system.persistent_tier.store(
     |             -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `retrieve` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1111:63
     |
1111 |                     let current_data = system.persistent_tier.retrieve(&format!("optimization_doc_{}", doc_id))
     |                                                               ^^^^^^^^ method not found in `PersistentMMapStorage`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1133:37
     |
1133 | ...                   attributes: [
     |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
     |
     = note: available fields are: `type_id`, `properties`, `embedding`

error[E0599]: no variant or associated item named `Float` found for enum `llmkg::AttributeValue` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1137:96
     |
1137 | ...                   ("efficiency_improvement".to_string(), AttributeValue::Float(1.0 - efficiency_score)),
     |                                                                              ^^^^^ variant or associated item not found in `AttributeValue`

error[E0308]: mismatched types
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1142:37
     |
1142 | ...                   format!("optimized_hot_{}", doc_id),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
     |
     = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1141:45
     |
1141 | ...                   memory_lock.add_entity(
     |                                   ^^^^^^^^^^
1142 | ...                       format!("optimized_hot_{}", doc_id),
1143 | ...                       entity_data
     |                           ----------- unexpected argument #2 of type `llmkg::EntityData`
     |
note: method defined here
    --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
     |
78   |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
     |            ^^^^^^^^^^
help: remove the extra argument
     |
1142 -                                     format!("optimized_hot_{}", doc_id),
1143 -                                     entity_data
1142 +                                     format!("optimized_hot_{}", doc_id)
     |

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1149:49
     |
1149 | ...                   system.archive_tier.store(
     |                       --------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1156:52
     |
1156 | ...                   system.persistent_tier.store(
     |                       -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0599]: no method named `store` found for struct `llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1211:40
     |
1211 |                 system.persistent_tier.store(
     |                 -----------------------^^^^^ method not found in `PersistentMMapStorage`

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1230:13
     |
1230 |             llmkg::extraction::Entity {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1238:58
     |
1238 |         let optimized_query_result = system.orchestrator.process_complex_query(
     |                                      --------------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1335:29
     |
1335 | ...                   attributes: [
     |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
     |
     = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1344:29
     |
1344 | ...                   format!("concurrent_{}_{}", doc_id, entity.id),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
     |
     = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1343:37
     |
1343 |                         memory_lock.add_entity(
     |                                     ^^^^^^^^^^
1344 |                             format!("concurrent_{}_{}", doc_id, entity.id),
1345 |                             entity_data
     |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
     |
note: method defined here
    --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
     |
78   |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
     |            ^^^^^^^^^^
help: remove the extra argument
     |
1344 -                             format!("concurrent_{}_{}", doc_id, entity.id),
1345 -                             entity_data
1344 +                             format!("concurrent_{}_{}", doc_id, entity.id)
     |

error[E0277]: the trait bound `ExtractionResult: Serialize` is not satisfied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1350:40
     |
1350 |                       let storage_data = serde_json::json!({
     |  ________________________________________^
1351 | |                         "doc_id": doc_id,
1352 | |                         "extraction": extraction,
1353 | |                         "document": document,
1354 | |                         "tier": tier,
1355 | |                         "concurrent_test": true
1356 | |                     });
     | |                      ^
     | |                      |
     | |______________________the trait `Serialize` is not implemented for `ExtractionResult`
     |                        required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ExtractionResult` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 653 others
     = note: required for `&ExtractionResult` to implement `Serialize`
note: required by a bound in `to_value`
    --> C:\Users\hotra\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.141\src\value\mod.rs:990:8
     |
988  | pub fn to_value<T>(value: T) -> Result<Value, Error>
     |        -------- required by a bound in this function
989  | where
990  |     T: Serialize,
     |        ^^^^^^^^^ required by this bound in `to_value`
     = note: this error originates in the macro `$crate::json_internal` which comes from the expansion of the macro `serde_json::json` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `store` found for mutable reference `&mut llmkg::PersistentMMapStorage` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1363:29
     |
1363 |                     storage.store(
     |                     --------^^^^^ method not found in `&mut PersistentMMapStorage`

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1376:39
     |
1376 |                 system.embedding_tier.add_embedding(
     |                 ----------------------^^^^^^^^^^^^^
     |
help: there is a method `get_embedding` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\embedding\store.rs:40:5
     |
40   |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1399:45
     |
1399 |                     let stats = memory_lock.get_stats();
     |                                             ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1405:51
     |
1405 |                         if memory_lock.get_entity(&entity_key).is_some() {
     |                                        ---------- ^^^^^^^^^^^ expected `EntityKey`, found `&String`
     |                                        |
     |                                        arguments to this method are incorrect
     |
note: method defined here
    --> C:\code\LLMKG\src\core\graph\entity_operations.rs:193:12
     |
193  |     pub fn get_entity(&self, key: EntityKey) -> Option<(EntityMeta, EntityData)> {
     |            ^^^^^^^^^^

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1458:29
     |
1458 | ...                   attributes: [
     |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
     |
     = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1467:29
     |
1467 | ...                   format!("concurrent_write_{}_{}", task_id, item_id),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
     |
     = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1466:43
     |
1466 |                         match memory_lock.add_entity(
     |                                           ^^^^^^^^^^
1467 |                             format!("concurrent_write_{}_{}", task_id, item_id),
1468 |                             entity_data
     |                             ----------- unexpected argument #2 of type `llmkg::EntityData`
     |
note: method defined here
    --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
     |
78   |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
     |            ^^^^^^^^^^
help: remove the extra argument
     |
1467 -                             format!("concurrent_write_{}_{}", task_id, item_id),
1468 -                             entity_data
1467 +                             format!("concurrent_write_{}_{}", task_id, item_id)
     |

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1527:49
     |
1527 |                         let stats = memory_lock.get_stats();
     |                                                 ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0560]: struct `llmkg::EntityData` has no field named `attributes`
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1533:29
     |
1533 | ...                   attributes: [
     |                       ^^^^^^^^^^ `llmkg::EntityData` does not have this field
     |
     = note: available fields are: `type_id`, `properties`, `embedding`

error[E0308]: mismatched types
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1539:54
     |
1539 |                         match memory_lock.add_entity(format!("mixed_{}", task_id), entity_data) {
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `EntityData`, found `String`
     |
     = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this method takes 1 argument but 2 arguments were supplied
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1539:43
     |
1539 |                         match memory_lock.add_entity(format!("mixed_{}", task_id), entity_data) {
     |                                           ^^^^^^^^^^                               ----------- unexpected argument #2 of type `llmkg::EntityData`
     |
note: method defined here
    --> C:\code\LLMKG\src\core\graph\entity_operations.rs:78:12
     |
78   |     pub fn add_entity(&self, data: EntityData) -> Result<EntityKey> {
     |            ^^^^^^^^^^
help: remove the extra argument
     |
1539 -                         match memory_lock.add_entity(format!("mixed_{}", task_id), entity_data) {
1539 +                         match memory_lock.add_entity(format!("mixed_{}", task_id)) {
     |

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1546:56
     |
1546 |                         let entity_count = memory_lock.get_stats().entity_count;
     |                                                        ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1547:62
     |
1547 |                         let relationship_count = memory_lock.get_stats().relationship_count;
     |                                                              ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
    --> tests\enhanced_knowledge_storage\integration\hierarchical_storage_integration.rs:1593:25
     |
1593 |             memory_lock.get_stats()
     |                         ^^^^^^^^^
     |
help: there is a method `get_path_stats` with a similar name, but with different arguments
    --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
     |
345  |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
  --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:89:45
   |
89 |         let reasoning_result = orchestrator.process_complex_query(
   |                                -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:101:32
    |
101 |         let stats = graph_lock.get_stats();
    |                                ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:161:33
    |
161 |                 embedding_store.add_embedding(&entity.id, embedding)
    |                                 ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:171:35
    |
171 |         let result = orchestrator.process_complex_query(
    |                      -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `find_similar` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:182:48
    |
182 |         let similar_entities = embedding_store.find_similar("Marie Curie", 3)
    |                                                ^^^^^^^^^^^^ method not found in `EmbeddingStore`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:188:75
    |
188 |         let marie_curie_connections = graph_lock.get_entity_relationships("Marie Curie")
    |                                                  ------------------------ ^^^^^^^^^^^^^ expected `EntityKey`, found `&str`
    |                                                  |
    |                                                  arguments to this method are incorrect
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:198:12
    |
198 |     pub fn get_entity_relationships(&self, entity: EntityKey) -> Vec<Relationship> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `unwrap_or_default` found for struct `Vec<llmkg::Relationship>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:189:14
    |
188 |           let marie_curie_connections = graph_lock.get_entity_relationships("Marie Curie")
    |  _______________________________________-
189 | |             .unwrap_or_default();
    | |             -^^^^^^^^^^^^^^^^^ method not found in `Vec<Relationship>`
    | |_____________|
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:242:33
    |
242 |                 embedding_store.add_embedding(&format!("{}_{}", entity.id, i), embedding)
    |                                 ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:261:48
    |
261 |         let entities: Vec<_> = (0..10).map(|i| llmkg::extraction::Entity {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0063]: missing fields `evidence` and `extraction_model` in initializer of `Relation`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:268:48
    |
268 |         let relations: Vec<_> = (0..5).map(|i| llmkg::extraction::Relation {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `evidence` and `extraction_model`

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:275:41
    |
275 |         let query_result = orchestrator.process_complex_query(
    |                            -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:349:17
    |
349 |                 target: "non_existent_entity".to_string(),
    |                 ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:350:17
    |
350 |                 relationship_type: "relates_to".to_string(),
    |                 ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:352:17
    |
352 |                 properties: std::collections::HashMap::new(),
    |                 ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:355:37
    |
355 |               let result = graph_lock.add_relationship(
    |  _____________________________________^^^^^^^^^^^^^^^^-
356 | |                 "valid_entity".to_string(),
    | |                 -------------------------- expected `EntityKey`, found `String`
357 | |                 invalid_relationship
    | |                 -------------------- expected `EntityKey`, found `Relationship`
358 | |             );
    | |_____________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
355 -             let result = graph_lock.add_relationship(
356 -                 "valid_entity".to_string(),
357 -                 invalid_relationship
358 -             );
355 +             let result = graph_lock.add_relationship(/* EntityKey */, /* EntityKey */, /* f32 */);
    |

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:368:13
    |
368 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:374:13
    |
374 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:382:35
    |
382 |         let result = orchestrator.process_complex_query(
    |                      -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:403:32
    |
403 |         let stats = graph_lock.get_stats();
    |                                ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_config` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:434:48
    |
434 |         let orchestrator_config = orchestrator.get_config();
    |                                                ^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:441:42
    |
441 |         let store_info = embedding_store.get_info();
    |                                          ^^^^^^^^ method not found in `EmbeddingStore`

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:446:13
    |
446 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0063]: missing fields `canonical_name`, `end_pos`, `linked_id` and 4 other fields in initializer of `ExtractionEntity`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:452:13
    |
452 |             llmkg::extraction::Entity {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `canonical_name`, `end_pos`, `linked_id` and 4 other fields

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:460:35
    |
460 |         let result = orchestrator.process_complex_query(
    |                      -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0609]: no field `confidence_threshold` on type `llmkg::CognitiveOrchestratorConfig`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:467:45
    |
467 |         assert!(result.confidence >= config.confidence_threshold - 0.1, 
    |                                             ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `enable_adaptive_selection`, `enable_ensemble_methods`, `default_timeout_ms`, `max_parallel_patterns`, `performance_tracking`

error[E0599]: no method named `get_memory_usage` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:472:39
    |
472 |         let memory_usage = graph_lock.get_memory_usage();
    |                                       ^^^^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `model_mocks::ModelBackendTrait` defines an item `get_memory_usage`, perhaps you need to implement it
   --> tests\enhanced_knowledge_storage\mocks\model_mocks.rs:99:1
    |
99  | pub trait ModelBackendTrait {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `memory_usage` with a similar name
    |
472 -         let memory_usage = graph_lock.get_memory_usage();
472 +         let memory_usage = graph_lock.memory_usage();
    |

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:486:24
    |
486 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:488:55
    |
488 |         let initial_embedding_count = embedding_store.get_info().count;
    |                                                       ^^^^^^^^ method not found in `EmbeddingStore`

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:511:21
    |
511 |                     target: relation.object_id.clone(),
    |                     ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:512:21
    |
512 |                     relationship_type: relation.predicate.clone(),
    |                     ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:514:21
    |
514 |                     properties: std::collections::HashMap::new(),
    |                     ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:516:28
    |
516 |                   graph_lock.add_relationship(
    |  ____________________________^^^^^^^^^^^^^^^^-
517 | |                     relation.subject_id.clone(),
    | |                     --------------------------- expected `EntityKey`, found `String`
518 | |                     relationship
    | |                     ------------ expected `EntityKey`, found `Relationship`
519 | |                 ).expect("Failed to add relationship");
    | |_________________- argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
516 -                 graph_lock.add_relationship(
517 -                     relation.subject_id.clone(),
518 -                     relationship
519 -                 ).expect("Failed to add relationship");
516 +                 graph_lock.add_relationship(/* EntityKey */, /* EntityKey */, /* f32 */).expect("Failed to add relationship");
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:526:29
    |
526 |             embedding_store.add_embedding(&entity.id, embedding)
    |                             ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:533:24
    |
533 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:535:53
    |
535 |         let final_embedding_count = embedding_store.get_info().count;
    |                                                     ^^^^^^^^ method not found in `EmbeddingStore`

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:545:41
    |
545 |         let query_result = orchestrator.process_complex_query(
    |                            -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_memory_usage` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:560:24
    |
560 |             graph_lock.get_memory_usage()
    |                        ^^^^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `model_mocks::ModelBackendTrait` defines an item `get_memory_usage`, perhaps you need to implement it
   --> tests\enhanced_knowledge_storage\mocks\model_mocks.rs:99:1
    |
99  | pub trait ModelBackendTrait {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `memory_usage` with a similar name
    |
560 -             graph_lock.get_memory_usage()
560 +             graph_lock.memory_usage()
    |

error[E0560]: struct `llmkg::Relationship` has no field named `target`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:636:33
    |
636 | ...                   target: format!("{}_{}_{}_{}", load_level, doc_idx, relation.object_id, total_entities - 1),
    |                       ^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `relationship_type`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:637:33
    |
637 | ...                   relationship_type: relation.predicate.clone(),
    |                       ^^^^^^^^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0560]: struct `llmkg::Relationship` has no field named `properties`
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:639:33
    |
639 | ...                   properties: [("batch".to_string(), AttributeValue::String(format!("{}", load_level)))]
    |                       ^^^^^^^^^^ `llmkg::Relationship` does not have this field
    |
    = note: available fields are: `from`, `to`, `rel_type`

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:644:40
    |
644 | ...                   graph_lock.add_relationship(subject_id, relationship)
    |                                  ^^^^^^^^^^^^^^^^--------------------------
    |                                                  ||           |
    |                                                  ||           expected `EntityKey`, found `Relationship`
    |                                                  |expected `EntityKey`, found `String`
    |                                                  argument #3 of type `f32` is missing
    |
note: method defined here
   --> C:\code\LLMKG\src\core\graph\relationship_operations.rs:40:12
    |
40  |     pub fn add_relationship(&self, from: EntityKey, to: EntityKey, weight: f32) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^
help: provide the argument
    |
644 -                             graph_lock.add_relationship(subject_id, relationship)
644 +                             graph_lock.add_relationship(/* EntityKey */, /* EntityKey */, /* f32 */)
    |

error[E0599]: no method named `add_embedding` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:656:41
    |
656 |                         embedding_store.add_embedding(&unique_id, embedding)
    |                                         ^^^^^^^^^^^^^
    |
help: there is a method `get_embedding` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\embedding\store.rs:40:5
    |
40  |     pub fn get_embedding(&self, offset: u32) -> Result<Vec<f32>> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `process_complex_query` found for struct `llmkg::CognitiveOrchestrator` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:670:45
    |
670 |             let query_result = orchestrator.process_complex_query(
    |                                -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `CognitiveOrchestrator`

error[E0599]: no method named `get_memory_usage` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_storage\integration\full_pipeline_integration.rs:688:28
    |
688 |                 graph_lock.get_memory_usage()
    |                            ^^^^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `model_mocks::ModelBackendTrait` defines an item `get_memory_usage`, perhaps you need to implement it
   --> tests\enhanced_knowledge_storage\mocks\model_mocks.rs:99:1
    |
99  | pub trait ModelBackendTrait {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `memory_usage` with a similar name
    |
688 -                 graph_lock.get_memory_usage()
688 +                 graph_lock.memory_usage()
    |

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:311:53
    |
311 |     test_comprehensive_workflow_validation_system().await;
    |     ----------------------------------------------- ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
311 -     test_comprehensive_workflow_validation_system().await;
311 +     test_comprehensive_workflow_validation_system();
    |
help: alternatively, consider making `fn test_comprehensive_workflow_validation_system` asynchronous
    |
14  | async async fn test_comprehensive_workflow_validation_system() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:315:42
    |
315 |     test_individual_workflow_scenarios().await;
    |     ------------------------------------ ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
315 -     test_individual_workflow_scenarios().await;
315 +     test_individual_workflow_scenarios();
    |
help: alternatively, consider making `fn test_individual_workflow_scenarios` asynchronous
    |
40  | async async fn test_individual_workflow_scenarios() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:319:45
    |
319 |     test_mock_system_workflow_integration().await;
    |     --------------------------------------- ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
319 -     test_mock_system_workflow_integration().await;
319 +     test_mock_system_workflow_integration();
    |
help: alternatively, consider making `fn test_mock_system_workflow_integration` asynchronous
    |
105 | async async fn test_mock_system_workflow_integration() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:323:38
    |
323 |     test_error_scenario_validation().await;
    |     -------------------------------- ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
323 -     test_error_scenario_validation().await;
323 +     test_error_scenario_validation();
    |
help: alternatively, consider making `fn test_error_scenario_validation` asynchronous
    |
163 | async async fn test_error_scenario_validation() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:327:35
    |
327 |     test_performance_validation().await;
    |     ----------------------------- ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
327 -     test_performance_validation().await;
327 +     test_performance_validation();
    |
help: alternatively, consider making `fn test_performance_validation` asynchronous
    |
207 | async async fn test_performance_validation() {
    |       +++++

error[E0277]: `()` is not a future
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:331:38
    |
331 |     test_data_integrity_validation().await;
    |     -------------------------------- ^^^^^ `()` is not a future
    |     |
    |     this call returns `()`
    |
    = help: the trait `futures::Future` is not implemented for `()`
    = note: () must be a future or must implement `IntoFuture` to be awaited
    = note: required for `()` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
331 -     test_data_integrity_validation().await;
331 +     test_data_integrity_validation();
    |
help: alternatively, consider making `fn test_data_integrity_validation` asynchronous
    |
255 | async async fn test_data_integrity_validation() {
    |       +++++

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:412:24
    |
412 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_info` found for struct `llmkg::embedding::EmbeddingStore` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:415:61
    |
415 |         let final_embedding_info = pipeline.embedding_store.get_info();
    |                                                             ^^^^^^^^ method not found in `EmbeddingStore`

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:463:14
    |
463 |             ("x".repeat(2_000_000), "too_large"),
    |              ^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `String`
    |
help: consider borrowing here
    |
463 |             (&"x".repeat(2_000_000), "too_large"),
    |              +

error[E0599]: no method named `get_stats` found for struct `tokio::sync::RwLockReadGuard<'_, llmkg::KnowledgeGraph>` in the current scope
   --> tests\enhanced_knowledge_integration\end_to_end_document_processing.rs:570:24
    |
570 |             graph_lock.get_stats()
    |                        ^^^^^^^^^
    |
help: there is a method `get_path_stats` with a similar name, but with different arguments
   --> C:\code\LLMKG\src\core\graph\path_finding.rs:345:5
    |
345 |     pub fn get_path_stats(&self, source: EntityKey, target: EntityKey) -> PathStats {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:507:67
    |
507 |             let query_results = system.perform_concurrent_queries(test_queries).await
    |                                        -------------------------- ^^^^^^^^^^^^ expected `Vec<String>`, found `Vec<&str>`
    |                                        |
    |                                        arguments to this method are incorrect
    |
    = note: expected struct `Vec<std::string::String>`
               found struct `Vec<&str>`
note: method defined here
   --> tests\enhanced_knowledge_integration\performance_load_tests.rs:145:18
    |
145 |         async fn perform_concurrent_queries(&self, queries: Vec<String>) -> Result<Vec<QueryMetrics>, String> {
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^        --------------------

warning: unused variable: `context`
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:115:9
    |
115 |     let context = system.analyze_global_context(&ingestion_result.document_id).await.unwrap();
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `model1_result`
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:150:9
    |
150 |     let model1_result = system.load_model("smollm2_135m").await.unwrap();
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_model1_result`

warning: unused variable: `model2_result`
   --> tests\enhanced_knowledge_storage\integration\comprehensive_workflow_validation.rs:151:9
    |
151 |     let model2_result = system.load_model("smollm2_360m").await.unwrap();
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_model2_result`

warning: unused variable: `model_backend`
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:468:13
    |
468 |         let model_backend = create_mock_model_backend_with_standard_models();
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_model_backend`

warning: unused variable: `index`
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:469:23
    |
469 |         let (storage, index, semantic_store) = setup_storage_mocks_with_sample_data();
    |                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `semantic_store`
   --> tests\enhanced_knowledge_storage\mock_system_verification.rs:469:30
    |
469 |         let (storage, index, semantic_store) = setup_storage_mocks_with_sample_data();
    |                              ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_semantic_store`

error[E0382]: borrow of moved value: `all_entities`
   --> tests\enhanced_knowledge_storage\comprehensive_mock_validation_test.rs:67:41
    |
47  |     let all_entities = mock_system.entities.get_all_entities();
    |         ------------ move occurs because `all_entities` has type `Vec<&MockEntity>`, which does not implement the `Copy` trait
...
60  |     for entity in all_entities {
    |                   ------------ `all_entities` moved due to this implicit call to `.into_iter()`
...
67  |     println!("   - Total entities: {}", all_entities.len());
    |                                         ^^^^^^^^^^^^ value borrowed here after move
    |
note: `into_iter` takes ownership of the receiver `self`, which moves `all_entities`
   --> C:\Users\hotra\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\core\src\iter\traits\collect.rs:313:18
    |
313 |     fn into_iter(self) -> Self::IntoIter;
    |                  ^^^^
help: consider iterating over a slice of the `Vec<&MockEntity>`'s content to avoid moving into the `for` loop
    |
60  |     for entity in &all_entities {
    |                   +

error[E0382]: borrow of moved value: `error_scenarios`
   --> tests\enhanced_knowledge_storage\comprehensive_mock_validation_test.rs:204:48
    |
189 |     let error_scenarios = mock_system.error_scenarios.get_all_scenarios();
    |         --------------- move occurs because `error_scenarios` has type `Vec<&comprehensive_mock_data::ErrorScenario>`, which does not implement the `Copy` trait
...
192 |     for scenario in error_scenarios {
    |                     --------------- `error_scenarios` moved due to this implicit call to `.into_iter()`
...
204 |     println!("   - Total error scenarios: {}", error_scenarios.len());
    |                                                ^^^^^^^^^^^^^^^ value borrowed here after move
    |
help: consider iterating over a slice of the `Vec<&comprehensive_mock_data::ErrorScenario>`'s content to avoid moving into the `for` loop
    |
192 |     for scenario in &error_scenarios {
    |                     +

error[E0004]: non-exhaustive patterns: `&_` not covered
   --> tests\enhanced_knowledge_integration\multi_hop_reasoning_integration.rs:287:19
    |
287 |             match result.hop_validation.as_str() {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `&_` not covered
    |
    = note: the matched value is of type `&str`
    = note: `&str` cannot be matched exhaustively, so a wildcard `_` is necessary
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
    |
300 ~                 },
301 +                 &_ => todo!()
    |

Some errors have detailed explanations: E0004, E0061, E0063, E0277, E0308, E0382, E0433, E0560, E0599...
For more information about an error, try `rustc --explain E0004`.
warning: `llmkg` (test "enhanced_knowledge_storage_tests") generated 24 warnings
error: could not compile `llmkg` (test "enhanced_knowledge_storage_tests") due to 328 previous errors; 24 warnings emitted
error: linking with `link.exe` failed: exit code: 1104
  |
  = note: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe" "/NOLOGO" "C:\\Users\\hotra\\AppData\\Local\\Temp\\rustcq1mw9o\\symbols.o" "<257 object files omitted>" "C:\\code\\LLMKG\\target\\debug\\deps/{libdirs-a7df28a0e7dcdb27.rlib,libdirs_sys-715f7b5050c49853.rlib,liboption_ext-0aeac58631c6d4e2.rlib,libnum_cpus-062fbe9d8b4ac63c.rlib,libreqwest-4bd804e86bbc6f69.rlib,librustls_pemfile-671a86b957b47559.rlib,libhyper_tls-ad8a7258eb053e91.rlib,libwinreg-0ac006f60d39a004.rlib,libipnet-c9a58146059e50b2.rlib,libtokio_native_tls-fa4a0c0a80860cc5.rlib,libnative_tls-98bdd62bb53ca79d.rlib,libschannel-9307b03c6b32c1d2.rlib,libsync_wrapper-c19d7444abfe4d16.rlib,libbincode-1f8d402085de4cbd.rlib}.rlib" "<sysroot>\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib/{libtest-*,libgetopts-*,libunicode_width-*}.rlib" "C:\\code\\LLMKG\\target\\debug\\deps/{libdashmap-12555e78b5cf197e.rlib,libhashbrown-8722785b5a6dc266.rlib,liballocator_api2-6f4d1ab5f3aeb746.rlib,libtracing_subscriber-e700b37d5383ccdf.rlib,libsharded_slab-4f62883a90e44425.rlib,liblazy_static-3d8ec8ae10170e7f.rlib,libmatchers-44d9c81e184fd88e.rlib,libregex_automata-6077c62c99342472.rlib,libregex_syntax-e733bf00080cc972.rlib,libnu_ansi_term-2944c2bb90546875.rlib,liboverload-aeb67e00b137be47.rlib,libthread_local-60930fd52e0720be.rlib,libtracing_log-88589bd14b41a88a.rlib,libclap-7d62f8e9ca0f2557.rlib,libclap_builder-4cae330447d30261.rlib,libstrsim-7523ddac0dc2913a.rlib,libanstream-7ab314f3af51ce93.rlib,libanstyle_query-950ebde44a17deb3.rlib,libis_terminal_polyfill-f3569afc4ef6a7b3.rlib,libanstyle_wincon-e1e045b3ec8c08e6.rlib,libonce_cell_polyfill-ae1e86f81c93883c.rlib,libcolorchoice-329e1eeaf8111c80.rlib,libanstyle_parse-19da9664b817a437.rlib,libutf8parse-d9ea59beb15c205d.rlib,libclap_lex-62867fe28b719681.rlib,libanstyle-0d3bb2c4b2ba66eb.rlib,libanyhow-5d6eb11c1ea1cb71.rlib,libtempfile-d1ae1453f1fef5b8.rlib,libfastrand-39ba8e27f12757d3.rlib,libnotify-0de59abe9ff61da2.rlib,libcrossbeam_channel-f2a9383892ced1c7.rlib,libfiletime-1fe7f3907de03f8d.rlib,libwindows_sys-f61f6208c52e5ef5.rlib,libwindows_targets-fbfb3988e707b93f.rlib,libwalkdir-dcdfa94850b66f2c.rlib,libsame_file-db617ecc991b41b5.rlib,libwinapi_util-71775bc389b08fa8.rlib,libsyn-c6475af3c4260c15.rlib,libquote-8a7fa2e8117b9095.rlib,libproc_macro2-61bc1f33dce4baa4.rlib,libunicode_ident-f349a2e573d37217.rlib}.rlib" "<sysroot>\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib/{libproc_macro-*,librustc_literal_escaper-*,librustc_std_workspace_std-*}.rlib" "C:\\code\\LLMKG\\target\\debug\\deps/{libwarp-3c233774aeaff71b.rlib,libmime_guess-dcf1aec107102ca4.rlib,libunicase-5c71c6ee1b45ce18.rlib,libserde_urlencoded-4c28127d21bda456.rlib,libscoped_tls-cb742f979ca1eae1.rlib,libtokio_tungstenite-a09b4c855f0d80d0.rlib,libtungstenite-b6be7b0c277da43a.rlib,libhttp-12270f40930b88bd.rlib,libmulter-ae0ede76deef0886.rlib,libspin-d1daa98df7a587ed.rlib,libencoding_rs-1267c78df1c26221.rlib,libheaders-bbd9a8c23ca6dd3a.rlib,libmime-eb0911424d6c8fa8.rlib,libheaders_core-02631de141e646df.rlib,libbase64-cef72e909afca7bf.rlib,libhyper-d2e3635db4a18a62.rlib,libwant-412d59b357a58b27.rlib,libtry_lock-c560c2143191fa27.rlib,libsocket2-ac7a829d44557316.rlib,libwindows_sys-bf8f2686e7c2ae7b.rlib,libh2-e3d0a757ca3230f0.rlib,libindexmap-4d6059a22e5f630a.rlib,libequivalent-8ce4c6f36fad3db6.rlib,libhashbrown-e02e0202285e42d8.rlib,libtokio_util-95ac114cc78dda08.rlib,libtower_service-22b4588a2cd86a01.rlib,libtracing-473d4e68aef7ed2c.rlib,libtracing_core-95818b6f820bbd65.rlib,libhttp_body-5bc2bef4da2a3db6.rlib,libhttpdate-3d347acfe814c777.rlib,libpin_project-d7e577feaa856eee.rlib,libtokio_tungstenite-f23637f6c0043bcb.rlib,libtungstenite-1f95f87e6d8a6b2b.rlib,libdata_encoding-618f20414bfb8c4c.rlib,libutf8-fba9f8fee196e93b.rlib,libbyteorder-95026cc0caf73ea5.rlib,libsha1-ea572ce7f9de2ff0.rlib,libcpufeatures-1b89ae33d66937b6.rlib,libdigest-45da76c627588c8b.rlib,libblock_buffer-4bc9dd97c84208da.rlib,libcrypto_common-7e111df10a699798.rlib,libgeneric_array-cffad019973866cb.rlib,libtypenum-c39b5524d62fcb01.rlib,libhttparse-3c9ea9d6df706731.rlib,liburl-dd9e87ff03f96903.rlib,libidna-f8103c193b0c93f0.rlib,libutf8_iter-f1c1483ca4410497.rlib,libidna_adapter-9f2c59a83b23bc24.rlib,libicu_properties-9fccd2e4b7473791.rlib,libicu_properties_data-3007e9cfcd8c2da7.rlib,libicu_normalizer-7e8213cfe497c3ce.rlib,libicu_normalizer_data-e445b37999bfe5bd.rlib,libicu_collections-6d6d4df02ad398b2.rlib,libpotential_utf-61a5c5d9a67897b4.rlib,libicu_provider-e02ef93cd93b7b2e.rlib,libicu_locale_core-b97efb542dc035ee.rlib,libtinystr-50ee673d51ad3e6a.rlib,liblitemap-8b9b5c6b0b57fcad.rlib,libwriteable-a505fe0592b5b19c.rlib,libzerovec-0baeb8191244555b.rlib,libzerotrie-d519e2c2893867d5.rlib,libyoke-cf7cadac71437f6f.rlib,libstable_deref_trait-e0e1f74fa5e817f7.rlib,libzerofrom-0c668c7e38c2413c.rlib,libform_urlencoded-6450301219f73ab0.rlib,libpercent_encoding-86ee895df420f630.rlib,liblog-c96e2dc4ef969be5.rlib,libhttp-c0f49dfa7ab9b128.rlib,libfnv-0e717dade6f863d1.rlib,libsysinfo-552d1bbe9081352c.rlib,libntapi-0386f11ade5f7273.rlib,libwinapi-56f4ff93e2416e14.rlib,liblibc-7700b69244c7fbd6.rlib,libwindows-63cf82538cccd09c.rlib,libwindows_core-4bb5b4d4861d9b13.rlib,libuuid-83d8152592590e2d.rlib,libfutures-bb61d0cba1b11b9e.rlib,libfutures_executor-fa9c9f11d4a365cc.rlib,libfutures_util-2872ce8059545e45.rlib,libfutures_io-7caaa579506bfbf9.rlib,libslab-858e48d8e6d31ed8.rlib,libfutures_channel-9d57f7e9e13f943d.rlib,libfutures_sink-4929eb81e9fd1464.rlib,libfutures_task-c0f2ef21567d12c4.rlib,libpin_utils-c814b6240919943f.rlib,libfutures_core-c4a2e14d930ef297.rlib,libregex-84eceb1a515f93cc.rlib,libregex_automata-3ddb86b1085ace7b.rlib,libaho_corasick-40b774ce0c7973e8.rlib,libregex_syntax-51be75ee240082dd.rlib,libchrono-a48ada27708a831a.rlib,libwindows_link-4ac7e865a7aabae4.rlib,libnum_traits-384072a23824b634.rlib,libserde_json-ef894fad7a1e081a.rlib,libmemchr-8f169d1c931c5d72.rlib,libitoa-bb8574a37b16121c.rlib,libryu-2f315bf189bebf49.rlib,libthiserror-c7533f151b11d11b.rlib,libbumpalo-47d7dc3faff29d4b.rlib,librand-625af083b1e5462a.rlib,librand_chacha-2a97e48932cfa130.rlib,libppv_lite86-ff4577976d60408f.rlib,librand_core-3d2462694e176a7e.rlib,libgetrandom-aeb7ed6105695889.rlib,libtokio-ff7c455fb98aa470.rlib,libsocket2-4a0aa32c2754007d.rlib,libbytes-92ead15f546b8d2f.rlib,libmio-4df24804a47ec7b8.rlib,libwindows_sys-33bffc94f3d791a8.rlib,libpin_project_lite-59605a3013f12a89.rlib,libslotmap-7e299f40c961f8c5.rlib,libserde-9a441033f25778cd.rlib,librayon-f51c95f49821f971.rlib,librayon_core-65b6705d97c41ad5.rlib,libcrossbeam_deque-b4f4c64546313b32.rlib,libcrossbeam_epoch-01fcb822418635ae.rlib,libcrossbeam_utils-2d82faec901f02fb.rlib,libeither-7b8cd2d71db7a0f2.rlib,libahash-a0577bb9f2f9715f.rlib,libgetrandom-8f74f61fbe266d72.rlib,libonce_cell-fc0f8ba94df5f37d.rlib,libzerocopy-01c2b4770440ab3a.rlib,libparking_lot-c0a9b3de7592ce15.rlib,libparking_lot_core-1b1b975148fe2baf.rlib,libwindows_targets-2131eebc48aeeefb.rlib,libcfg_if-75f52109bf7f470b.rlib,libsmallvec-332637ef19257e4d.rlib,liblock_api-562194434c5d53b1.rlib,libscopeguard-057b364f15226d95.rlib}.rlib" "<sysroot>\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib/{libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*}.rlib" "kernel32.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\lib\\windows.0.48.5.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib\\windows.0.52.0.lib" "ntdll.lib" "advapi32.lib" "credui.lib" "gdi32.lib" "kernel32.lib" "msimg32.lib" "opengl32.lib" "secur32.lib" "winspool.lib" "legacy_stdio_definitions.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib\\windows.0.52.0.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib\\windows.0.52.0.lib" "bcrypt.lib" "advapi32.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib\\windows.0.52.0.lib" "C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib\\windows.0.52.0.lib" "kernel32.lib" "kernel32.lib" "ntdll.lib" "userenv.lib" "ws2_32.lib" "dbghelp.lib" "/defaultlib:msvcrt" "/NXCOMPAT" "/LIBPATH:C:\\code\\LLMKG\\target\\debug\\build\\libsqlite3-sys-d51bc10c97c003e9\\out" "/LIBPATH:C:\\code\\LLMKG\\target\\debug\\build\\zstd-sys-8d47bfffa644e785\\out" "/LIBPATH:C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib" "/LIBPATH:C:\\Users\\hotra\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.5\\lib" "/LIBPATH:C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\atlmfc\\lib\\x64" "/LIBPATH:C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\atlmfc\\lib\\x64" "/OUT:C:\\code\\LLMKG\\target\\debug\\deps\\llmkg-cfa5e4b7ecf4a223.exe" "/OPT:REF,ICF" "/DEBUG" "/PDBALTPATH:%_PDB%" "/NATVIS:<sysroot>\\lib\\rustlib\\etc\\intrinsic.natvis" "/NATVIS:<sysroot>\\lib\\rustlib\\etc\\liballoc.natvis" "/NATVIS:<sysroot>\\lib\\rustlib\\etc\\libcore.natvis" "/NATVIS:<sysroot>\\lib\\rustlib\\etc\\libstd.natvis" "/FORCE:MULTIPLE"
  = note: some arguments are omitted. use `--verbose` to show all linker arguments
  = note: LINK : fatal error LNK1104: cannot open file 'C:\code\LLMKG\target\debug\deps\llmkg-cfa5e4b7ecf4a223.exe'␍
          

error: could not compile `llmkg` (lib test) due to 1 previous error
