[workspace]
members = [
    "crates/neuromorphic-core",
    "crates/snn-allocation-engine", 
    "crates/temporal-memory",
    "crates/neural-bridge",
    "crates/neuromorphic-wasm",
    "crates/snn-mocks",
    "crates/vector-search",
]
resolver = "2"

[workspace.package]
version = "0.1.0"
authors = ["CortexKG Team"]
edition = "2021"
license = "MIT"

[workspace.dependencies]
# Core async runtime and concurrency (ALL PHASES)
tokio = { version = "1.35.1", features = ["full", "tracing", "rt-multi-thread", "macros"] }
async-trait = { version = "0.1.77" }
futures = { version = "0.3.30" }
rayon = { version = "1.8.0" }
crossbeam = { version = "0.8.4" }
parking_lot = { version = "0.12.1", features = ["deadlock_detection"] }
once_cell = { version = "1.19.0" }
dashmap = { version = "5.5.3", features = ["serde"] }

# Serialization and data handling (ALL PHASES)
serde = { version = "1.0.193", features = ["derive", "rc"] }
serde_json = { version = "1.0.108" }
bincode = { version = "1.3.3" }
uuid = { version = "1.7.0", features = ["v4", "serde", "fast-rng"] }
chrono = { version = "0.4.31", features = ["serde", "clock"] }

# Error handling and logging (ALL PHASES)
anyhow = { version = "1.0.78" }
thiserror = { version = "1.0.51" }
tracing = { version = "0.1.40" }
tracing-subscriber = { version = "0.3.18", features = ["env-filter", "json", "registry", "std"] }
tracing-appender = { version = "0.2.3" }

# Neural network framework - intelligently select 1-4 optimal types from available architectures
ndarray = "0.15"                 # Linear algebra foundation
# Note: Specialized neural network crates will be added in Phase 1 after foundation is stable

# Graph storage and processing (PHASE_2-11) - Minimal for Phase 0
petgraph = "0.6"                 # Core graph processing

# Vector search and text processing (PHASE_0 onwards)
tantivy = { version = "0.24.0", features = ["mmap"] }             # Full-text search engine with memory mapping
tree-sitter = { version = "0.20.10" }                             # AST parsing for code
tree-sitter-rust = { version = "0.20.4" }                         # Rust language support
tree-sitter-python = { version = "0.20.4" }                       # Python language support
walkdir = { version = "2.4.0" }                                   # Directory traversal
regex = { version = "1.10.2" }                                    # Regular expressions

# Vector search specific dependencies (to be added when protobuf setup is complete)
# lancedb = { version = "0.4.20" }                                # Vector database (requires protobuf compiler)
# arrow = { version = "51.0.0", features = ["csv", "ipc", "json"] } # Arrow data format support (optional for now)
# polars = { version = "0.36.2", features = ["lazy", "temporal"] }  # Data processing framework (optional for now)

# Memory management and optimization (ALL PHASES)
jemallocator = "0.5"
mimalloc = "0.1"
wee_alloc = "0.4"                # WASM allocator

# WASM and SIMD support (PHASE_9-11)
wasm-bindgen = { version = "0.2", features = ["spans"] }
wasm-bindgen-futures = "0.4"
js-sys = "0.3"
web-sys = { version = "0.3", features = ["console", "Performance", "Window"] }

# Testing and benchmarking (ALL PHASES)
criterion = { version = "0.5.1", features = ["html_reports", "csv_output"] }
proptest = { version = "1.4.0" }
mockall = { version = "0.12.1" }
tokio-test = { version = "0.4.3" }
tempfile = { version = "3.8.1" }

# Random number generation for testing
rand = { version = "0.8.5", features = ["std_rng"] }

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.release.package."*"]
opt-level = 3

[profile.dev]
opt-level = 0
debug = true

[profile.bench]
inherits = "release"
debug = true