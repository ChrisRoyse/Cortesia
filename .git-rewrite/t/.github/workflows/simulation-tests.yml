name: LLMKG Simulation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - comprehensive
        - performance
        - stress
      test_seed:
        description: 'Deterministic seed for reproducible tests'
        required: false
        default: '42'
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  LLMKG_TEST_SEED: ${{ github.event.inputs.test_seed || '42' }}
  LLMKG_CACHE_DIR: ./test_data_cache
  LLMKG_REPORT_DIR: ./test_reports
  LLMKG_TEMP_DIR: ./test_temp

jobs:
  # Quick smoke tests for every push/PR
  quick-tests:
    name: Quick Simulation Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' && (github.event.inputs.test_type == 'quick' || github.event.inputs.test_type == '')
    timeout-minutes: 30
    
    strategy:
      matrix:
        rust-version: [stable]
        include:
          - rust-version: stable
            allow-failure: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Setup test environment
      run: |
        mkdir -p $LLMKG_CACHE_DIR
        mkdir -p $LLMKG_REPORT_DIR
        mkdir -p $LLMKG_TEMP_DIR
        echo "LLMKG_CI=true" >> $GITHUB_ENV
        echo "LLMKG_MAX_PARALLEL_TESTS=2" >> $GITHUB_ENV

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build LLMKG core
      run: cargo build --release

    - name: Build test infrastructure
      run: cargo build --release --package llmkg-tests

    - name: Run infrastructure self-tests
      run: |
        cd tests
        cargo test --release -- --test-threads=2 infrastructure::

    - name: Run quick simulation tests
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config quick \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR \
          --timeout 300 \
          --parallel 2

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quick-test-results-${{ matrix.rust-version }}
        path: |
          test_reports/
          test_temp/
        retention-days: 7

    - name: Generate test summary
      if: always()
      run: |
        echo "## Quick Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "$LLMKG_REPORT_DIR/summary.json" ]; then
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat $LLMKG_REPORT_DIR/summary.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi

  # Comprehensive tests for scheduled runs and manual triggers
  comprehensive-tests:
    name: Comprehensive Simulation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'comprehensive'
    timeout-minutes: 120
    
    strategy:
      matrix:
        rust-version: [stable, beta]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          - rust-version: beta
            os: windows-latest
          - rust-version: beta
            os: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust-version }}-cargo-

    - name: Setup test environment
      shell: bash
      run: |
        mkdir -p $LLMKG_CACHE_DIR
        mkdir -p $LLMKG_REPORT_DIR
        mkdir -p $LLMKG_TEMP_DIR
        echo "LLMKG_CI=true" >> $GITHUB_ENV
        echo "LLMKG_MAX_PARALLEL_TESTS=4" >> $GITHUB_ENV

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config

    - name: Build with all features
      run: cargo build --release --all-features

    - name: Build test infrastructure
      run: cargo build --release --package llmkg-tests --all-features

    - name: Run comprehensive simulation tests
      shell: bash
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config comprehensive \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR \
          --timeout 1800 \
          --parallel 4 \
          --enable-dashboard false \
          --enable-profiling true

    - name: Run cross-platform determinism validation
      shell: bash
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config determinism \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/determinism \
          --validate-cross-platform true

    - name: Generate performance baselines
      if: matrix.rust-version == 'stable' && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config baseline \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/baseline \
          --update-baselines true

    - name: Upload comprehensive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-results-${{ matrix.rust-version }}-${{ matrix.os }}
        path: |
          test_reports/
          test_temp/
        retention-days: 30

    - name: Upload performance baselines
      if: matrix.rust-version == 'stable' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: performance-baselines
        path: test_reports/baseline/
        retention-days: 90

  # Performance-specific tests
  performance-tests:
    name: Performance Benchmark Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'performance'
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-perf-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup high-performance environment
      run: |
        # Configure CPU governor for consistent performance
        echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
        # Disable CPU frequency scaling
        sudo cpupower frequency-set --governor performance
        # Set environment for performance testing
        echo "LLMKG_PERF_MODE=true" >> $GITHUB_ENV
        echo "LLMKG_MAX_PARALLEL_TESTS=1" >> $GITHUB_ENV  # Single-threaded for consistent results
        mkdir -p $LLMKG_CACHE_DIR $LLMKG_REPORT_DIR $LLMKG_TEMP_DIR

    - name: Build optimized binaries
      run: |
        cargo build --release --package llmkg-tests --features performance-monitoring
        cargo build --release --all-features

    - name: Run performance benchmarks
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config performance \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR \
          --timeout 3600 \
          --parallel 1 \
          --enable-profiling true \
          --validate-performance-targets true

    - name: Run criterion benchmarks
      run: |
        cargo bench --package llmkg-tests -- --output-format html

    - name: Performance regression analysis
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config regression \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/regression \
          --baseline-comparison true

    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          test_reports/
          target/criterion/
        retention-days: 30

  # Stress testing for resource limits
  stress-tests:
    name: Stress Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'stress'
    timeout-minutes: 180

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-stress-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup stress test environment
      run: |
        # Increase resource limits for stress testing
        ulimit -n 65536  # File descriptors
        ulimit -u 32768  # Processes
        echo "LLMKG_STRESS_MODE=true" >> $GITHUB_ENV
        echo "LLMKG_MAX_PARALLEL_TESTS=8" >> $GITHUB_ENV
        mkdir -p $LLMKG_CACHE_DIR $LLMKG_REPORT_DIR $LLMKG_TEMP_DIR

    - name: Build stress test binaries
      run: |
        cargo build --release --package llmkg-tests --all-features
        cargo build --release --all-features

    - name: Run memory stress tests
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config stress-memory \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/memory \
          --timeout 1800

    - name: Run CPU stress tests
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config stress-cpu \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/cpu \
          --timeout 1800

    - name: Run concurrent access stress tests
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config stress-concurrent \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/concurrent \
          --timeout 1800

    - name: Upload stress test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-results
        path: test_reports/
        retention-days: 14

  # WebAssembly testing
  wasm-tests:
    name: WebAssembly Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build WASM package
      run: wasm-pack build --target web --features wasm

    - name: Setup Node.js for WASM testing
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run WASM tests
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config wasm \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/wasm \
          --target wasm32-unknown-unknown

    - name: Upload WASM test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: wasm-test-results
        path: test_reports/wasm/
        retention-days: 7

  # Documentation and reporting
  generate-documentation:
    name: Generate Test Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'comprehensive'
    needs: [comprehensive-tests]
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: comprehensive-test-results-*
        merge-multiple: true
        path: ./artifacts

    - name: Generate consolidated report
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config report \
          --input-dir ../artifacts \
          --output-dir $LLMKG_REPORT_DIR/consolidated \
          --generate-html true \
          --generate-pdf true

    - name: Generate test coverage report
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config coverage \
          --input-dir ../artifacts \
          --output-dir $LLMKG_REPORT_DIR/coverage

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: test_reports/consolidated
        destination_dir: simulation-reports

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: test-documentation
        path: test_reports/
        retention-days: 90

  # Security and validation
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1

    - name: Validate test isolation
      run: |
        cd tests
        cargo run --release --bin test-runner -- \
          --config security \
          --seed $LLMKG_TEST_SEED \
          --output-dir $LLMKG_REPORT_DIR/security \
          --validate-isolation true

  # Notification and status reporting
  report-status:
    name: Report Test Status
    runs-on: ubuntu-latest
    if: always()
    needs: [quick-tests, comprehensive-tests, performance-tests, stress-tests, wasm-tests]

    steps:
    - name: Calculate overall status
      id: status
      run: |
        # Determine overall success based on required jobs
        REQUIRED_SUCCESS=true
        
        if [[ "${{ needs.quick-tests.result }}" == "failure" ]]; then
          REQUIRED_SUCCESS=false
        fi
        
        if [[ "${{ github.event_name }}" == "schedule" && "${{ needs.comprehensive-tests.result }}" == "failure" ]]; then
          REQUIRED_SUCCESS=false
        fi
        
        echo "success=$REQUIRED_SUCCESS" >> $GITHUB_OUTPUT
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Quick Tests: ${{ needs.quick-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive Tests: ${{ needs.comprehensive-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Stress Tests: ${{ needs.stress-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- WASM Tests: ${{ needs.wasm-tests.result }}" >> $GITHUB_STEP_SUMMARY

    - name: Create issue on failure
      if: steps.status.outputs.success == 'false' && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Nightly simulation tests failed - ${new Date().toISOString().split('T')[0]}`,
            body: `The nightly simulation tests have failed. Please check the workflow run for details.\n\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}`,
            labels: ['bug', 'testing', 'nightly-failure']
          })