{
  "taxonomy_statistics": {
    "total_errors": 16,
    "false_positives": 12,
    "false_negatives": 4,
    "by_language": {
      "python": 12,
      "rust": 4,
      "javascript": 0
    },
    "by_severity": {
      "high": 8,
      "medium": 5,
      "low": 3
    },
    "average_confidence": {
      "false_positives": 0.8621666666666666,
      "false_negatives": 0.0
    }
  },
  "reproduction_results": {
    "total_errors": 16,
    "reproduced_errors": 16,
    "failed_reproductions": 0,
    "error_details": {
      "error_001": {
        "error_id": "error_001",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 1.0
      },
      "error_002": {
        "error_id": "error_002",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 1.0
      },
      "error_003": {
        "error_id": "error_003",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "medium",
        "confidence": 1.0
      },
      "error_004": {
        "error_id": "error_004",
        "error_type": "class_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "low",
        "confidence": 0.2
      },
      "error_005": {
        "error_id": "error_005",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "low",
        "confidence": 0.15
      },
      "error_006": {
        "error_id": "error_006",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 1.0
      },
      "error_007": {
        "error_id": "error_007",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 1.0
      },
      "error_008": {
        "error_id": "error_008",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "medium",
        "confidence": 1.0
      },
      "error_009": {
        "error_id": "error_009",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "medium",
        "confidence": 1.0
      },
      "error_010": {
        "error_id": "error_010",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "medium",
        "confidence": 1.0
      },
      "error_011": {
        "error_id": "error_011",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "medium",
        "confidence": 0.996
      },
      "error_012": {
        "error_id": "error_012",
        "error_type": "function_without_docstring",
        "language": "python",
        "category": "false_positive",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "low",
        "confidence": 1.0
      },
      "error_013": {
        "error_id": "error_013",
        "error_type": "trait_implementation_docs",
        "language": "rust",
        "category": "false_negative",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 0.0
      },
      "error_014": {
        "error_id": "error_014",
        "error_type": "impl_block_documentation",
        "language": "rust",
        "category": "false_negative",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 0.0
      },
      "error_015": {
        "error_id": "error_015",
        "error_type": "impl_block_documentation",
        "language": "rust",
        "category": "false_negative",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 0.0
      },
      "error_016": {
        "error_id": "error_016",
        "error_type": "module_documentation",
        "language": "rust",
        "category": "false_negative",
        "reproducible": true,
        "test_case_created": true,
        "root_cause_identified": true,
        "fix_strategy_provided": true,
        "severity": "high",
        "confidence": 0.0
      }
    },
    "reproduction_rate": 100.0
  },
  "all_errors": {
    "error_001": {
      "error_id": "error_001",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/indexer_advanced_v2.py",
      "line_number": 368,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Function definition without docstring incorrectly detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef some_function():\n    # This is just a comment, not documentation\n    pass\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Pattern matcher incorrectly identifies inline comments as docstrings",
      "fix_strategy": "Improve docstring detection to distinguish between comments and actual docstrings",
      "severity": "high"
    },
    "error_002": {
      "error_id": "error_002",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/indexer_advanced_v2.py",
      "line_number": 404,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Function with only implementation comments detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef _extract_enhanced_class_chunk(self, node, code, imports, global_vars):\n    # Extract class with full context including docstrings and type hints\n    lines = code.split('\\n')\n    return result\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Comment on first line after function def misidentified as docstring",
      "fix_strategy": "Strengthen docstring pattern matching to require triple quotes or proper docstring format",
      "severity": "high"
    },
    "error_003": {
      "error_id": "error_003",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/indexer_advanced_v2.py",
      "line_number": 435,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Function with complex signature incorrectly flagged as documented",
      "test_case": "\n# Minimal reproduction case  \ndef complex_function_signature(\n    param1: str,\n    param2: Dict[str, Any],\n    param3: Optional[List[int]] = None\n) -> Tuple[bool, str]:\n    return True, \"result\"\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Multi-line function signatures confuse the documentation detector",
      "fix_strategy": "Improve parsing to handle multi-line function definitions correctly",
      "severity": "medium"
    },
    "error_004": {
      "error_id": "error_004",
      "category": "false_positive",
      "error_type": "class_without_docstring",
      "language": "python",
      "file_path": "vectors/mcp_rag_server.py",
      "line_number": 60,
      "item_description": "class UniversalIndexer",
      "confidence": 0.2,
      "pattern_description": "Class without docstring has low-confidence false positive detection",
      "test_case": "\n# Minimal reproduction case\nclass UniversalIndexer:\n    def __init__(self):\n        # Just initialization code\n        self.data = {}\n        \n# Expected: No documentation detected  \n# Actual: Documentation detected with confidence 0.2\n",
      "root_cause": "Weak confidence threshold allows noise in class detection",
      "fix_strategy": "Increase confidence threshold for class documentation detection",
      "severity": "low"
    },
    "error_005": {
      "error_id": "error_005",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/mcp_rag_server.py",
      "line_number": 339,
      "item_description": "function query_codebase",
      "confidence": 0.15,
      "pattern_description": "Function without docstring has very low confidence false positive",
      "test_case": "\n# Minimal reproduction case\ndef query_codebase(query: str) -> List[str]:\n    # Implementation only\n    results = []\n    return results\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 0.15\n",
      "root_cause": "Very low confidence threshold creates noise in function detection",
      "fix_strategy": "Set minimum confidence threshold of 0.3 for documentation detection",
      "severity": "low"
    },
    "error_006": {
      "error_id": "error_006",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/query_advanced.py",
      "line_number": 264,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Anonymous function definition incorrectly detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef processing_function(data):\n    result = data.process()\n    return result\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Generic function pattern matching without docstring validation",
      "fix_strategy": "Add explicit docstring presence check before marking as documented",
      "severity": "high"
    },
    "error_007": {
      "error_id": "error_007",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/smart_chunker.py",
      "line_number": 782,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Function with type hints but no docstring detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef validate_chunk(chunk: Dict[str, Any]) -> bool:\n    if not chunk:\n        return False\n    return True\n    \n# Expected: No documentation detected  \n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Type hints incorrectly interpreted as documentation",
      "fix_strategy": "Separate type hint detection from docstring detection logic",
      "severity": "high"
    },
    "error_008": {
      "error_id": "error_008",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/smart_chunker_optimized.py",
      "line_number": 1362,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Function at end of file incorrectly detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef final_cleanup():\n    gc.collect()\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "End-of-file position affects documentation detection heuristics",
      "fix_strategy": "Remove file position bias from documentation detection algorithm",
      "severity": "medium"
    },
    "error_009": {
      "error_id": "error_009",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/test_mcp_complete.py",
      "line_number": 150,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Test function without docstring detected as documented",
      "test_case": "\n# Minimal reproduction case\ndef test_basic_functionality():\n    assert True\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0  \n",
      "root_cause": "Test function patterns incorrectly flagged as requiring documentation",
      "fix_strategy": "Add special handling for test functions to reduce false positives",
      "severity": "medium"
    },
    "error_010": {
      "error_id": "error_010",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/test_python_specific.py",
      "line_number": 11,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Simple test function incorrectly flagged as documented",
      "test_case": "\n# Minimal reproduction case\ndef test_example():\n    data = load_test_data()\n    result = process(data)\n    assert result is not None\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Test function heuristics overly aggressive in detection",
      "fix_strategy": "Implement test function whitelist to reduce noise",
      "severity": "medium"
    },
    "error_011": {
      "error_id": "error_011",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/test_smart_chunker.py",
      "line_number": 430,
      "item_description": "function def",
      "confidence": 0.996,
      "pattern_description": "High-confidence false positive on undocumented test function",
      "test_case": "\n# Minimal reproduction case\ndef test_chunker_performance():\n    start_time = time.time()\n    chunks = chunker.process(large_file)\n    duration = time.time() - start_time\n    assert duration < MAX_PROCESSING_TIME\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 0.996\n",
      "root_cause": "Performance test patterns trigger false documentation detection",
      "fix_strategy": "Refine confidence scoring to reduce false positives on test functions",
      "severity": "medium"
    },
    "error_012": {
      "error_id": "error_012",
      "category": "false_positive",
      "error_type": "function_without_docstring",
      "language": "python",
      "file_path": "vectors/test_ultra_reliable_system.py",
      "line_number": 108,
      "item_description": "function def",
      "confidence": 1.0,
      "pattern_description": "Utility test function without docs incorrectly detected",
      "test_case": "\n# Minimal reproduction case\ndef cleanup_test_environment():\n    if os.path.exists(TEST_DB_PATH):\n        os.remove(TEST_DB_PATH)\n    reset_global_state()\n    \n# Expected: No documentation detected\n# Actual: Documentation detected with confidence 1.0\n",
      "root_cause": "Cleanup functions incorrectly classified as requiring documentation",
      "fix_strategy": "Add function name pattern matching to exclude utility functions",
      "severity": "low"
    },
    "error_013": {
      "error_id": "error_013",
      "category": "false_negative",
      "error_type": "trait_implementation_docs",
      "language": "rust",
      "file_path": "crates/neuromorphic-core/src/error.rs",
      "line_number": 76,
      "item_description": "function context",
      "confidence": 0.0,
      "pattern_description": "Rust trait implementation with documentation not detected",
      "test_case": "\n// Minimal reproduction case\n/// Provides additional context for error handling\nimpl<T, E> ResultExt<T> for Result<T, E>\nwhere\n    E: std::error::Error + Send + Sync + 'static,\n{\n    /// Add contextual information to an error\n    fn context<C>(self, context: C) -> Result<T>\n    where\n        C: std::fmt::Display + Send + Sync + 'static,\n    {\n        // Implementation\n    }\n}\n\n// Expected: Documentation detected for context function\n// Actual: No documentation detected (confidence 0.0)\n",
      "root_cause": "Rust trait implementation documentation not recognized by Python-based parser",
      "fix_strategy": "Add Rust-specific documentation patterns for impl blocks and trait methods",
      "severity": "high"
    },
    "error_014": {
      "error_id": "error_014",
      "category": "false_negative",
      "error_type": "impl_block_documentation",
      "language": "rust",
      "file_path": "crates/neuromorphic-core/src/simd_backend.rs",
      "line_number": 47,
      "item_description": "impl Default",
      "confidence": 0.0,
      "pattern_description": "Rust Default implementation with standard docs not detected",
      "test_case": "\n// Minimal reproduction case\n/// Default implementation for SIMDSpikeProcessor\nimpl Default for SIMDSpikeProcessor {\n    /// Creates a new SIMDSpikeProcessor with default settings\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n// Expected: Documentation detected for Default impl\n// Actual: No documentation detected (confidence 0.0)\n",
      "root_cause": "Rust impl block documentation patterns not handled by detector",
      "fix_strategy": "Implement Rust impl block parsing with /// comment recognition",
      "severity": "high"
    },
    "error_015": {
      "error_id": "error_015",
      "category": "false_negative",
      "error_type": "impl_block_documentation",
      "language": "rust",
      "file_path": "crates/neuromorphic-core/src/ttfs_concept.rs",
      "line_number": 107,
      "item_description": "impl Default",
      "confidence": 0.0,
      "pattern_description": "Another Rust Default implementation missed by detector",
      "test_case": "\n// Minimal reproduction case\n/// Default implementation for TTFSConcept\nimpl Default for TTFSConcept {\n    /// Creates a TTFSConcept with default values\n    fn default() -> Self {\n        Self {\n            spike_times: Vec::new(),\n            confidence: 0.0,\n            metadata: HashMap::new(),\n        }\n    }\n}\n\n// Expected: Documentation detected for Default impl  \n// Actual: No documentation detected (confidence 0.0)\n",
      "root_cause": "Consistent failure to detect Rust impl Default patterns",
      "fix_strategy": "Add specific pattern matching for Rust Default trait implementations",
      "severity": "high"
    },
    "error_016": {
      "error_id": "error_016",
      "category": "false_negative",
      "error_type": "module_documentation",
      "language": "rust",
      "file_path": "crates/neuromorphic-wasm/src/lib.rs",
      "line_number": 7,
      "item_description": "module mod",
      "confidence": 0.0,
      "pattern_description": "Rust module documentation not detected",
      "test_case": "\n// Minimal reproduction case\n//! WebAssembly bindings for neuromorphic processing\n//! \n//! This module provides WASM-compatible interfaces for the core\n//! neuromorphic algorithms, enabling browser-based execution.\n\npub mod simd_bindings;\npub mod snn_wasm;\n\n// Expected: Module documentation detected\n// Actual: No documentation detected (confidence 0.0) \n",
      "root_cause": "Rust module-level documentation (//!) not recognized by detector",
      "fix_strategy": "Implement Rust module documentation parsing for //! comments",
      "severity": "high"
    }
  }
}