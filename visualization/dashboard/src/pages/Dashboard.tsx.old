import React, { useState, useEffect } from 'react';
import { Grid, Paper, Box, Typography, Card, CardContent, CircularProgress, Chip, IconButton, Tooltip } from '@mui/material';
import { RefreshRounded, SignalCellularAltRounded, StorageRounded, SpeedRounded, MemoryRounded } from '@mui/icons-material';
import { useWebSocket } from '../providers/WebSocketProvider';
import { useAppSelector } from '../stores';
import { CognitivePatternVisualizer } from '../components/CognitivePatternVisualizer';
import { NeuralActivityHeatmap } from '../components/NeuralActivityHeatmap';
import { KnowledgeGraphPreview } from '../components/KnowledgeGraphPreview';
import { MemoryConsolidationMonitor } from '../components/MemoryConsolidationMonitor';
import { PerformanceMetricsCard } from '../components/PerformanceMetricsCard';
import { SystemHealthIndicator } from '../components/SystemHealthIndicator';
import { VisualizationErrorBoundary } from '../components/ErrorBoundary';
import './Dashboard.css';

const Dashboard: React.FC = () => {
  const { isConnected, connectionState, latency } = useWebSocket();
  const currentData = useAppSelector(state => state.data.current);
  const [refreshing, setRefreshing] = useState(false);

  const handleRefresh = () => {
    setRefreshing(true);
    // Trigger data refresh
    setTimeout(() => setRefreshing(false), 1000);
  };

  const getConnectionColor = () => {
    switch (connectionState) {
      case 'connected': return 'success';
      case 'connecting': return 'warning';
      case 'error': return 'error';
      default: return 'default';
    }
  };

  const formatLatency = (ms: number | undefined) => {
    if (!ms) return 'N/A';
    return `${ms.toFixed(0)}ms`;
  };

  return (
    <Box className="dashboard-container" data-testid="dashboard-container" sx={{ p: 3, height: '100%', overflow: 'auto' }}>
      {/* Header */}
      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Box>
          <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 600 }}>
            LLMKG Neural Dashboard
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Real-time brain-inspired knowledge graph monitoring and visualization
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
          <Chip
            icon={<SignalCellularAltRounded />}
            label={connectionState}
            color={getConnectionColor()}
            variant="outlined"
            data-testid="websocket-status"
          />
          <Tooltip title="Refresh dashboard">
            <IconButton onClick={handleRefresh} disabled={refreshing}>
              <RefreshRounded className={refreshing ? 'rotating' : ''} />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Key Metrics Row */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card elevation={2} data-testid="system-latency-card">
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" variant="body2">
                    System Latency
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 500 }} data-testid="latency-value">
                    {formatLatency(latency)}
                  </Typography>
                </Box>
                <SpeedRounded sx={{ fontSize: 40, opacity: 0.3, color: 'primary.main' }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card elevation={2} data-testid="active-neurons-card">
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" variant="body2">
                    Active Neurons
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 500 }} data-testid="neuron-count">
                    {currentData?.neural?.activity?.length || 0}
                  </Typography>
                </Box>
                <MemoryRounded sx={{ fontSize: 40, opacity: 0.3, color: 'secondary.main' }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card elevation={2} data-testid="memory-usage-card">
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" variant="body2">
                    Memory Usage
                  </Typography>
                  <Typography variant="h4" sx={{ fontWeight: 500 }} data-testid="memory-percentage">
                    {currentData?.performance?.memory ? 
                      `${currentData.performance.memory.toFixed(0)}%` : 'N/A'}
                  </Typography>
                </Box>
                <StorageRounded sx={{ fontSize: 40, opacity: 0.3, color: 'warning.main' }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <VisualizationErrorBoundary componentName="System Health Indicator">
            <SystemHealthIndicator data={currentData} />
          </VisualizationErrorBoundary>
        </Grid>
      </Grid>

      {/* Main Visualizations */}
      <Grid container spacing={3}>
        {/* Cognitive Patterns */}
        <Grid item xs={12} lg={6}>
          <Paper elevation={2} sx={{ p: 2, height: '400px' }}>
            <Typography variant="h6" gutterBottom>
              Cognitive Pattern Analysis
            </Typography>
            <VisualizationErrorBoundary componentName="Cognitive Pattern Visualizer">
              {currentData?.cognitive ? (
                <CognitivePatternVisualizer patterns={currentData.cognitive.patterns} />
              ) : (
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
                  <Typography color="text.secondary">Waiting for cognitive data...</Typography>
                </Box>
              )}
            </VisualizationErrorBoundary>
          </Paper>
        </Grid>

        {/* Neural Activity */}
        <Grid item xs={12} lg={6}>
          <Paper elevation={2} sx={{ p: 2, height: '400px' }}>
            <Typography variant="h6" gutterBottom>
              Neural Activity Heatmap
            </Typography>
            <VisualizationErrorBoundary componentName="Neural Activity Heatmap">
              {currentData?.neural ? (
                <NeuralActivityHeatmap activity={currentData.neural.activity} />
              ) : (
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
                  <Typography color="text.secondary">Waiting for neural data...</Typography>
                </Box>
              )}
            </VisualizationErrorBoundary>
          </Paper>
        </Grid>

        {/* Knowledge Graph */}
        <Grid item xs={12} lg={8}>
          <Paper elevation={2} sx={{ p: 2, height: '500px' }}>
            <Typography variant="h6" gutterBottom>
              Knowledge Graph Structure
            </Typography>
            <VisualizationErrorBoundary componentName="Knowledge Graph Preview">
              <KnowledgeGraphPreview data={currentData} />
            </VisualizationErrorBoundary>
          </Paper>
        </Grid>

        {/* Memory Consolidation */}
        <Grid item xs={12} lg={4}>
          <Paper elevation={2} sx={{ p: 2, height: '500px' }}>
            <Typography variant="h6" gutterBottom>
              Memory Consolidation
            </Typography>
            <VisualizationErrorBoundary componentName="Memory Consolidation Monitor">
              {currentData?.memory ? (
                <MemoryConsolidationMonitor memory={currentData.memory} />
              ) : (
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>
                  <Typography color="text.secondary">Waiting for memory data...</Typography>
                </Box>
              )}
            </VisualizationErrorBoundary>
          </Paper>
        </Grid>

        {/* Performance Metrics */}
        <Grid item xs={12}>
          <Paper elevation={2} sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              System Performance Metrics
            </Typography>
            <VisualizationErrorBoundary componentName="Performance Metrics Card">
              <PerformanceMetricsCard performance={currentData?.performance} />
            </VisualizationErrorBoundary>
          </Paper>
        </Grid>
      </Grid>

      {/* Connection Status Footer */}
      {!isConnected && (
        <Box sx={{ 
          position: 'fixed', 
          bottom: 0, 
          left: 0, 
          right: 0, 
          bgcolor: 'error.main', 
          color: 'white',
          p: 1,
          textAlign: 'center'
        }}>
          <Typography variant="body2">
            WebSocket disconnected. Attempting to reconnect...
          </Typography>
        </Box>
      )}
    </Box>
  );
};

export default Dashboard;